{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#welcome-to-python-module","title":"Welcome to Python Module","text":"<p>Hi, I\u2019m Aayush, your instructor for this session.</p> <p>Welcome to the Kings College Python Training!</p> <p>I\u2019m excited to be part of your learning journey and would love to stay connected beyond this session. Whether you have questions, want to share ideas, or just expand your professional network \u2014 feel free to reach out!</p> <p>\ud83d\udd17 Connect with me on LinkedIn</p>"},{"location":"lectures/1.Introduction/","title":"Introduction to Python","text":""},{"location":"lectures/1.Introduction/#python-programming-introduction-to-python","title":"\ud83d\udcd3 Python Programming - Introduction to Python","text":""},{"location":"lectures/1.Introduction/#1-what-exactly-is-python","title":"1. What exactly is Python?","text":"<p>Python is a high-level, interpreted, general-purpose programming language known for its simplicity and readability. </p> <p>It is widely used for:</p> <ul> <li> <p>Web Development</p> </li> <li> <p>Data Science</p> </li> <li> <p>Machine Learning &amp; AI</p> </li> <li> <p>Automation &amp; Scripting</p> </li> <li> <p>Software Development</p> </li> <li> <p>Game Development</p> </li> </ul> <p>Key Features:</p> <ul> <li> <p>Easy to learn &amp; use  </p> </li> <li> <p>Open-source &amp; community-driven  </p> </li> <li> <p>Extensive libraries &amp; frameworks  </p> </li> <li> <p>Cross-platform  </p> </li> <li> <p>Supports multiple programming paradigms (procedural, object-oriented, functional)  </p> </li> </ul>"},{"location":"lectures/1.Introduction/#2-pythons-root-and-ecosystem","title":"2. Python's Root and Ecosystem","text":"<p>\ud83d\udc0d Origin:</p> <ul> <li> <p>Created by Guido van Rossum in the late 1980s.</p> </li> <li> <p>First released in 1991.</p> </li> <li> <p>Name inspired by the British comedy group Monty Python, not the snake.</p> </li> </ul> <p>\ud83c\udf0d Ecosystem:</p> <ul> <li> <p>Rich set of libraries (e.g., NumPy, Pandas, Matplotlib)</p> </li> <li> <p>Package management through pip</p> </li> <li> <p>Large developer community</p> </li> <li> <p>Popular frameworks: Django, Flask, FastAPI for web; TensorFlow, PyTorch for AI/ML</p> </li> </ul>"},{"location":"lectures/1.Introduction/#3-python-installation-ides-setting-up","title":"3. Python Installation &amp; IDEs Setting Up","text":"<p>\u2699\ufe0f Installation: - Recommended: Install latest version from https://www.python.org</p> <p>\ud83d\udcbb Popular IDEs for Python:</p> <ul> <li> <p>Google Colab (cloud-based, no installation needed)</p> </li> <li> <p>Jupyter Notebook (ideal for data science, interactive coding)</p> </li> <li> <p>VS Code (lightweight, customizable)</p> </li> <li> <p>PyCharm (feature-rich, professional-grade)</p> </li> </ul> <p>\u27a4 Example: Running Python in Google Colab 1. Visit https://colab.research.google.com</p> <ol> <li> <p>Click \"New Notebook\"</p> </li> <li> <p>Write your Python code and press Shift + Enter to run</p> </li> </ol> <pre><code># Simple Python code in Colab\n\nprint(\"Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\")\n</code></pre> <pre><code>Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\n</code></pre>"},{"location":"lectures/1.Introduction/#4-python-framework-syntax","title":"4. Python Framework &amp; Syntax","text":"<p>Python Syntax Basics: - Case-sensitive</p> <ul> <li> <p>Indentation defines blocks (no curly braces)</p> </li> <li> <p>Easy to read and write</p> </li> </ul> <pre><code># Printing a message\nprint(\"I thought Python was a snake... why am I coding?\")\n\n# Indentation defines code blocks\nx = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre> <pre><code>I thought Python was a snake... why am I coding?\nx is greater than 5\n</code></pre> <pre><code># Variables and Data Types\nname = \"Chirag\"        # String\nage = 25               # Integer\nheight = 5.6           # Float\nis_student = True      # Boolean\n\nprint(f\"Name: {name}, Age: {age}, Height: {height}, Student: {is_student}\")\n\n# Comments in Python\n# This is a single-line comment\n\n\"\"\"\nThis is a multi-line comment\nor docstring\n\"\"\"\n\n# Python's dynamic typing\nx = 10        # x is an integer\nx = \"hello\"   # now x is a string\nx = [1, 2, 3] # now x is a list\nprint(\"Dynamic typing demo:\", x)\n</code></pre> <pre><code>Name: Chirag, Age: 25, Height: 5.6, Student: True\nDynamic typing demo: [1, 2, 3]\n</code></pre> <pre><code>import cowsay\n\ncowsay.kitty(\"I am a kitty! not a snake!\")\n</code></pre> <pre><code>  __________________________\n| I am a kitty! not a snake! |\n  ==========================\n                             \\\n                              \\\n                               \\\n                                \\\n                                 (\"`-'  '-/\") .___..--' ' \"`-._\n                                  ` *_ *  )    `-.   (      ) .`-.__. `)\n                                   (_Y_.) ' ._   )   `._` ;  `` -. .-'\n                                _.. `--'_..-_/   /--' _ .' ,4\n                               ( i l ),-''  ( l i),'  ( ( ! .-'\n</code></pre> <p>Let's try basic operations:</p> <ul> <li> <p>Printing messages</p> </li> <li> <p>Simple arithmetic</p> </li> <li> <p>Using variables</p> </li> </ul> <pre><code># Print statement\nprint(\"Python: Less hiss, more code.\")\n\n# Arithmetic operations\na = 5\nb = 3\nprint(\"Sum:\", a + b)\nprint(\"Difference:\", a - b)\nprint(\"Product:\", a * b)\nprint(\"Division:\", a / b)\n</code></pre> <pre><code>Python: Less hiss, more code.\nSum: 8\nDifference: 2\nProduct: 15\nDivision: 1.6666666666666667\n</code></pre> <pre><code># Getting user input\n# name = input(\"What's your name? \")\n# age = input(\"How old are you? \")\n# print(f\"Hello {name}! You are {age} years old.\")\n\n# Note: Uncomment the above lines to try interactive input\n\n# String operations\nmessage = \"Python Programming\"\nprint(\"Original:\", message)\nprint(\"Uppercase:\", message.upper())\nprint(\"Lowercase:\", message.lower())\nprint(\"Length:\", len(message))\nprint(\"Replace:\", message.replace(\"Python\", \"Amazing Python\"))\n</code></pre> <pre><code>Original: Python Programming\nUppercase: PYTHON PROGRAMMING\nLowercase: python programming\nLength: 18\nReplace: Amazing Python Programming\n</code></pre> <ul> <li> <p>Python is simple, versatile, and powerful  </p> </li> <li> <p>Created by Guido van Rossum  </p> </li> <li> <p>Strong ecosystem with packages &amp; frameworks  </p> </li> <li> <p>Available in multiple IDEs (Colab, Jupyter, VS Code)  </p> </li> <li> <p>Indentation is critical in Python  </p> </li> <li> <p>Hands-on coding encouraged  </p> </li> </ul>"},{"location":"lectures/1.Introduction/#5-the-zen-of-python-best-practices","title":"5. The Zen of Python &amp; Best Practices","text":"<p>\ud83e\uddd8 Python Philosophy: Python follows the \"Zen of Python\" principles - try running <code>import this</code> in Python!</p> <pre><code># The Zen of Python\nimport this\n</code></pre> <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre> <p>\ud83d\udccb Python Naming Conventions:</p> <ul> <li> <p>Variables: <code>snake_case</code> (e.g., <code>user_name</code>, <code>total_count</code>)</p> </li> <li> <p>Functions: <code>snake_case</code> (e.g., <code>calculate_area()</code>, <code>get_user_input()</code>)</p> </li> <li> <p>Classes: <code>PascalCase</code> (e.g., <code>UserAccount</code>, <code>DataProcessor</code>)</p> </li> <li> <p>Constants: <code>UPPER_CASE</code> (e.g., <code>MAX_SIZE</code>, <code>DEFAULT_TIMEOUT</code>)</p> </li> </ul> <pre><code># Basic Error Handling\ntry:\n    number = int(\"not_a_number\")\nexcept ValueError as e:\n    print(f\"Oops! That's not a valid number: {e}\")\n\n# Better approach\ntry:\n    user_input = \"42\"  # This would normally be input()\n    number = int(user_input)\n    result = 100 / number\n    print(f\"Result: {result}\")\nexcept ValueError:\n    print(\"Please enter a valid number!\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nexcept Exception as e:\n    print(f\"Something went wrong: {e}\")\n</code></pre> <pre><code>Oops! That's not a valid number: invalid literal for int() with base 10: 'not_a_number'\nResult: 2.380952380952381\n</code></pre>"},{"location":"lectures/1.Introduction/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p>Basic Exercises:</p> <ol> <li> <p>Print your name using Python.</p> </li> <li> <p>Try basic arithmetic operations (addition, subtraction, multiplication, division).</p> </li> <li> <p>Explore Google Colab or Jupyter Notebook and run your first Python code.</p> </li> </ol> <p>Intermediate Exercises:</p> <ol> <li> <p>Create variables for your name, age, and favorite color, then print them in a formatted sentence.</p> </li> <li> <p>Write a program that calculates the area of a rectangle (length \u00d7 width).</p> </li> <li> <p>Try the <code>import this</code> command and read through the Zen of Python.</p> </li> </ol> <p>Challenge Exercises:</p> <ol> <li> <p>Create a simple calculator that adds two numbers (use variables, not input for now).</p> </li> <li> <p>Write a program that converts temperature from Celsius to Fahrenheit using the formula: F = (C \u00d7 9/5) + 32.</p> </li> <li> <p>Practice string operations: take a sentence and print it in uppercase, lowercase, and count its characters.</p> </li> </ol>"},{"location":"lectures/10.Automation/","title":"10.Automation","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\n</code></pre> <pre><code>driver = webdriver.Chrome()\nv = driver.get(\"http://www.python.org\")\nassert \"Python\" in driver.title\n\nelem = driver.find_element(By.NAME, \"q\")\nelem.clear()\nelem.send_keys(\"pycon\")\nelem.send_keys(Keys.RETURN)\nassert \"No results found.\" not in driver.page_source\ndriver.close()\n</code></pre> <pre><code>elem\n</code></pre> <pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=\"b31433a852fcef58bd06dc077d6a72f5\", element=\"f.7B69F7FBD41F1A05336890B75566CAE6.d.AC10A7A049F8200DE875893CBBE20B00.e.9\")&gt;\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"lectures/2.DataTypes/","title":"Data Types","text":""},{"location":"lectures/2.DataTypes/#python-programming-python-basics","title":"\ud83d\udcd3 Python Programming - Python Basics","text":""},{"location":"lectures/2.DataTypes/#1-data-types-variables","title":"1. Data Types &amp; Variables","text":"<p>What are Variables? - Variables are containers for storing data values.</p> <ul> <li>No need to declare the type explicitly (Python is dynamically typed).</li> </ul> <p>Common Data Types in Python: - <code>str</code>  \u2192 String (text)</p> <ul> <li> <p><code>int</code>  \u2192 Integer (whole numbers)</p> </li> <li> <p><code>float</code> \u2192 Floating-point numbers (decimals)</p> </li> <li> <p><code>complex</code> \u2192 Complex numbers (real + imaginary)</p> </li> <li> <p><code>bool</code> \u2192 Boolean (True/False)</p> </li> <li> <p><code>None</code> \u2192 Represents the absence of a value (null-like)</p> </li> </ul> <pre><code># String\nname = \"Alice\"\nprint(name,type(name))\n\n# Integer\nage = 25\nprint(age,type(age))\n\n# Float\nheight = 5.7\nprint(height,type(height))\n\n# Complex\nz = 2 + 3j\nprint(z,type(z))\n\n# Boolean\nis_student = True\nprint(is_student,type(is_student))\n\n# None Type\ndata = None\nprint(data,type(data))\n</code></pre> <p>Variable Naming Rules:</p> <ul> <li> <p>Must start with a letter or underscore (_)</p> </li> <li> <p>Can contain letters, numbers, and underscores</p> </li> <li> <p>Case-sensitive (<code>name</code> and <code>Name</code> are different)</p> </li> <li> <p>Cannot use Python keywords (like <code>if</code>, <code>for</code>, <code>class</code>)</p> </li> </ul> <p>Naming Conventions:</p> <ul> <li> <p>Use descriptive names: <code>user_age</code> instead of <code>a</code></p> </li> <li> <p>Use snake_case: <code>first_name</code> instead of <code>firstName</code></p> </li> <li> <p>Constants in UPPER_CASE: <code>MAX_SIZE = 100</code></p> </li> </ul> <pre><code># Valid variable names\nuser_name = \"Alice\"\nage_2024 = 25\n_private_var = \"hidden\"\n\n# Multiple assignment\nx, y, z = 1, 2, 3\nprint(f\"x={x}, y={y}, z={z}\")\n\n# Same value to multiple variables\na = b = c = 10\nprint(f\"a={a}, b={b}, c={c}\")\n\n# Invalid examples (commented out to avoid errors)\n# 2name = \"Invalid\"      # Cannot start with number\n# my-name = \"Invalid\"    # Cannot contain hyphens\n# class = \"Invalid\"      # Cannot use Python keywords\n</code></pre> <pre><code>one = 1\ntwo = 2\nthree = one + two\nprint(three)\n\nhello = \"hello\"\nworld = \"world\"\nhelloworld = hello + \" \" + world\nprint(helloworld)\n</code></pre>"},{"location":"lectures/2.DataTypes/#2-input-and-output-functions","title":"2. Input and Output Functions","text":"<p>Output: <code>print()</code> - Used to display information to the console.</p> <p>Input: <code>input()</code> - Takes input from the user as a string.</p> <pre><code># Output\nprint(\"Hello, World!\")\n\n# Input\nname = input(\"Enter your name: \")\nprint(\"Welcome,\", name)\n</code></pre> <p>Important Note about input():</p> <ul> <li> <p><code>input()</code> always returns a string, even if the user enters a number</p> </li> <li> <p>You need to convert it to the appropriate type if needed</p> </li> </ul> <pre><code># Input is always a string\nuser_input = input(\"Enter a number: \")\nprint(f\"You entered: {user_input} (type: {type(user_input)})\")\n\n# Convert to integer for calculations\ntry:\n    number = int(user_input)\n    result = number * 2\n    print(f\"Double of your number: {result}\")\nexcept ValueError:\n    print(\"That's not a valid number!\")\n\n# Alternative: Convert directly (but handle errors)\n# age = int(input(\"Enter your age: \"))  # This can crash if not a number\n</code></pre>"},{"location":"lectures/2.DataTypes/#3-working-with-format-method-f-strings-escape-sequences","title":"3. Working with format() Method, f-Strings, &amp; Escape Sequences","text":"<p>** String Formatting: - <code>format()</code> method inserts variables into strings.</p> <ul> <li><code>f-strings</code> (Python 3.6+) provide a concise way to embed expressions inside string literals.</li> </ul> <p>** Escape Sequences: - <code>\\n</code> \u2192 New line</p> <ul> <li> <p><code>\\t</code> \u2192 Tab space</p> </li> <li> <p><code>\\\\</code> \u2192 Backslash</p> </li> <li> <p><code>\\\"</code> or <code>\\'</code> \u2192 Quotes</p> </li> </ul> <pre><code># Using format()\nname = \"Vini\"\nage = 23\nprint(\"My name is {} and I am {} years old.\".format(name, age))\n\n# Using f-strings\nprint(f\"My name is {name} and I am {age} years old.\")\n\n# Escape sequences\nprint(\"Hello\\tWorld\")  # Tab\nprint(\"Line 1\\nLine 2\")  # New line\nprint(\"She said, \\\"Python is fun!\\\"\")\n</code></pre> <pre><code>name = \"John\"\nprint(\"Hello, %s!\" % name)\n\nmylist = [1,2,3]\nprint(\"A list: %s\" % mylist)\n</code></pre> <p><code>%s</code> - String (or any object with a string representation, like numbers)</p> <p><code>%d</code> - Integers</p> <p><code>%f</code> - Floating point numbers</p> <p><code>%.&lt;number of digits&gt;f</code> - Floating point numbers with a fixed amount of digits to the right of the dot.</p> <p><code>%x/%X</code> - Integers in hex representation (lowercase/uppercase)</p>"},{"location":"lectures/2.DataTypes/#4-basic-arithmetic-operators","title":"4. Basic Arithmetic &amp; Operators","text":"<p>Arithmetic Operators: - <code>+</code> \u2192 Addition</p> <ul> <li> <p><code>-</code> \u2192 Subtraction</p> </li> <li> <p><code>*</code> \u2192 Multiplication</p> </li> <li> <p><code>/</code> \u2192 Division</p> </li> <li> <p><code>//</code> \u2192 Floor Division (discards remainder)</p> </li> <li> <p><code>%</code> \u2192 Modulus (remainder)</p> </li> <li> <p><code>**</code> \u2192 Exponent (power)</p> </li> </ul> <pre><code>a = 10\nb = 3\n\nprint(\"Addition:\", a + b)\nprint(\"Subtraction:\", a - b)\nprint(\"Multiplication:\", a * b)\nprint(\"Division:\", a / b)\nprint(\"Floor Division:\", a // b)\nprint(\"Modulus:\", a % b)\nprint(\"Exponent:\", a ** b)\n</code></pre> <p>Comparison Operators:</p> <ul> <li> <p><code>==</code> \u2192 Equal to</p> </li> <li> <p><code>!=</code> \u2192 Not equal to</p> </li> <li> <p><code>&gt;</code> \u2192 Greater than</p> </li> <li> <p><code>&lt;</code> \u2192 Less than</p> </li> <li> <p><code>&gt;=</code> \u2192 Greater than or equal to</p> </li> <li> <p><code>&lt;=</code> \u2192 Less than or equal to</p> </li> </ul> <p>Logical Operators:</p> <ul> <li> <p><code>and</code> \u2192 Both conditions must be True</p> </li> <li> <p><code>or</code> \u2192 At least one condition must be True</p> </li> <li> <p><code>not</code> \u2192 Reverses the result</p> </li> </ul> <pre><code># Comparison operators\nx = 10\ny = 5\n\nprint(\"Comparison Results:\")\nprint(f\"x == y: {x == y}\")\nprint(f\"x != y: {x != y}\")\nprint(f\"x &gt; y: {x &gt; y}\")\nprint(f\"x &lt; y: {x &lt; y}\")\nprint(f\"x &gt;= y: {x &gt;= y}\")\nprint(f\"x &lt;= y: {x &lt;= y}\")\n\n# Logical operators\nage = 20\nhas_license = True\n\nprint(\"\\nLogical Operations:\")\nprint(f\"Can drive: {age &gt;= 18 and has_license}\")\nprint(f\"Student or senior: {age &lt; 25 or age &gt; 65}\")\nprint(f\"Not a teenager: {not (13 &lt;= age &lt;= 19)}\")\n</code></pre>"},{"location":"lectures/2.DataTypes/#5-type-casting-type-checking-validation","title":"5. Type Casting, Type Checking, &amp; Validation","text":"<p>Type Casting: - Convert one data type to another using functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, etc.</p> <p>Type Checking: - Use <code>type()</code> function to check the data type.</p> <p>Simple Validation Example: - Check if the input is numeric using <code>.isdigit()</code>.</p> <pre><code># Type Casting\nx = \"5\"\ny = int(x)  # Convert string to integer\nprint(y + 2)  # Output: 7\n\n# Type Checking\nprint(type(y))  # Output: &lt;class 'int'&gt;\n\n# Validation Example\nuser_input = input(\"Enter a number: \")\nif user_input.isdigit():\n    print(\"You entered:\", int(user_input))\nelse:\n    print(\"Invalid input. Please enter a number.\")\n</code></pre> <p>More Type Conversion Examples:</p> <pre><code># Various type conversions\nprint(\"=== Type Conversions ===\")\n\n# String to numbers\nstr_int = \"42\"\nstr_float = \"3.14\"\nprint(f\"String to int: {int(str_int)}\")\nprint(f\"String to float: {float(str_float)}\")\n\n# Numbers to string\nnum = 100\npi = 3.14159\nprint(f\"Int to string: '{str(num)}'\")\nprint(f\"Float to string: '{str(pi)}'\")\n\n# Float to int (truncates decimal)\nprint(f\"Float to int: {int(pi)}\")\n\n# Boolean conversions\nprint(f\"Bool to int: {int(True)}, {int(False)}\")\nprint(f\"Bool to string: '{str(True)}'\")\n\n# Truthy and Falsy values\nprint(f\"bool(0): {bool(0)}\")\nprint(f\"bool(''): {bool('')}\")\nprint(f\"bool('hello'): {bool('hello')}\")\nprint(f\"bool(None): {bool(None)}\")\n\n# Common conversion errors (commented to avoid crashes)\n# int(\"hello\")  # ValueError\n# float(\"not_a_number\")  # ValueError\n</code></pre>"},{"location":"lectures/2.DataTypes/#6-constants-and-variable-scope","title":"6. Constants and Variable Scope","text":"<p>Constants:</p> <ul> <li> <p>Python doesn't have true constants, but convention is to use ALL_CAPS</p> </li> <li> <p>These are variables that shouldn't be changed after assignment</p> </li> </ul> <pre><code># Constants (by convention)\nPI = 3.14159\nMAX_USERS = 100\nAPP_NAME = \"My Python App\"\n\nprint(f\"Pi value: {PI}\")\nprint(f\"Maximum users: {MAX_USERS}\")\nprint(f\"App name: {APP_NAME}\")\n\n# Using constants in calculations\nradius = 5\narea = PI * radius ** 2\nprint(f\"Area of circle with radius {radius}: {area}\")\n\n# Variable scope example\nglobal_var = \"I'm global\"\n\ndef demo_function():\n    local_var = \"I'm local\"\n    print(f\"Inside function: {global_var}\")\n    print(f\"Inside function: {local_var}\")\n\ndemo_function()\nprint(f\"Outside function: {global_var}\")\n# print(local_var)  # This would cause an error - local_var not accessible\n</code></pre> <p>Quick Recap</p> <p>\u2705 Python supports multiple data types (string, int, float, etc.)  </p> <p>\u2705 Variables store data values dynamically  </p> <p>\u2705 Use <code>print()</code> for output and <code>input()</code> for taking user input  </p> <p>\u2705 String formatting with <code>format()</code> and <code>f-strings</code> </p> <p>\u2705 Arithmetic operations are straightforward  </p> <p>\u2705 Type casting, checking, and basic input validation enhance reliability  </p>"},{"location":"lectures/2.DataTypes/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p><code>Q. The target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20.</code></p> <ol> <li> <p>Declare variables for your name, age, and height. Print them using f-strings.</p> </li> <li> <p>Ask the user for two numbers and print their sum.</p> </li> <li> <p>Write a program to check if the user entered a valid number.</p> </li> <li> <p>Experiment with escape sequences to format output.</p> </li> <li> <p>Use nested loops to print a pattern like:</p> </li> </ol> <p>Additional Practice Exercises:</p> <ol> <li> <p>Calculator Program: Create a simple calculator that takes two numbers and an operation (+, -, *, /) from the user.</p> </li> <li> <p>Temperature Converter: Write a program that converts temperature between Celsius and Fahrenheit.</p> </li> <li> <p>Data Type Explorer: Create variables of different types and use <code>type()</code> to display their types.</p> </li> <li> <p>Boolean Logic: Write a program that checks if a number is positive, negative, or zero using comparison operators.</p> </li> <li> <p>String Manipulation: Take a user's full name and display it in different formats (uppercase, lowercase, title case).</p> </li> <li> <p>Age Calculator: Calculate someone's age in years, months, and days given their birth year.</p> </li> <li> <p>Input Validation: Create a program that keeps asking for a number until the user provides a valid integer.</p> </li> </ol> <pre><code>*\n**\n***\n****\n*****\n\n******\n*****\n****\n***\n**\n*\n\n     *\n    ***\n   *****\n  *******\n *********\n***********\n</code></pre> <p>** Solution</p> <pre><code>max = 6\nprint(\"=\"*15)\nfor i in range(max):\n    print(f'{\"*\" * (i)}')\n\nprint(\"=\"*15)\nfor i in range(max):\n    print(f'{\"*\" * (max - i)}')\n\nprint(\"=\"*15)\nfor i in range(1,max+1):\n    print(\" \" * (max - i) + \"*\" * (2 * i - 1))\nprint(\"=\"*15)\n</code></pre> <p>Solution: <pre><code># change this code\nmystring = \"hello\"\nmyfloat = 10.0\nmyint = 20\n\n# testing code\nif mystring == \"hello\":\n    print(\"String: %s\" % mystring)\nif isinstance(myfloat, float) and myfloat == 10.0:\n    print(\"Float: %f\" % myfloat)\nif isinstance(myint, int) and myint == 20:\n    print(\"Integer: %d\" % myint)\n</code></pre></p>"},{"location":"lectures/3.ControlStructures/","title":"Control Structures","text":""},{"location":"lectures/3.ControlStructures/#python-programming-control-structures","title":"\ud83d\udcd3 Python Programming - Control Structures","text":""},{"location":"lectures/3.ControlStructures/#1-conditional-statements","title":"1. Conditional Statements","text":"<p>Conditional Statements in Python: - Used to make decisions based on conditions.</p> <ul> <li>Keywords: <code>if</code>, <code>elif</code>, <code>else</code>.</li> </ul> <pre><code># Simple if-else\nage = 20\n\nif age &gt;= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n\n# if-elif-else\nmarks = 85\n\nif marks &gt;= 90:\n    print(\"Grade: A+\")\nelif marks &gt;= 75:\n    print(\"Grade: A\")\nelif marks &gt;= 60:\n    print(\"Grade: B\")\nelse:\n    print(\"Grade: C\")\n</code></pre> <p>Nested Conditionals &amp; Ternary Operator:</p> <pre><code># Nested conditionals\nage = 25\nhas_license = True\n\nif age &gt;= 18:\n    if has_license:\n        print(\"You can drive!\")\n    else:\n        print(\"You need a license to drive.\")\nelse:\n    print(\"You're too young to drive.\")\n\n# Ternary operator (conditional expression)\nresult = \"Pass\" if marks &gt;= 60 else \"Fail\"\nprint(f\"Result: {result}\")\n\n# Multiple conditions with logical operators\ntemperature = 25\nweather = \"sunny\"\n\nif temperature &gt; 20 and weather == \"sunny\":\n    print(\"Perfect weather for outdoor activities!\")\nelif temperature &gt; 20 or weather == \"cloudy\":\n    print(\"Good weather for a walk.\")\nelse:\n    print(\"Stay indoors!\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#2-loops","title":"2. Loops","text":"<p>Python supports two main types of loops: 1. <code>for</code> loop \u2192 Iterate over sequences (strings, lists, tuples, etc.)</p> <ol> <li><code>while</code> loop \u2192 Repeats while a condition is True</li> </ol> <p>\u27a4 For Loop Example:</p> <pre><code># Loop over a range of numbers - For loop example\nfor i in range(5):\n    print(i)\n</code></pre> <p>Understanding range() and enumerate():</p> <pre><code># Different ways to use range()\nprint(\"range(5):\")\nfor i in range(5):\n    print(i, end=\" \")\nprint()\n\nprint(\"range(2, 8):\")\nfor i in range(2, 8):\n    print(i, end=\" \")\nprint()\n\nprint(\"range(0, 10, 2):\")\nfor i in range(0, 10, 2):\n    print(i, end=\" \")\nprint()\n\nprint(\"range(10, 0, -2):\")\nfor i in range(10, 0, -2):\n    print(i, end=\" \")\nprint()\n\n# Using enumerate() to get index and value\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(\"\\nUsing enumerate():\")\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n\n# Starting enumerate from a different number\nprint(\"\\nEnumerate starting from 1:\")\nfor index, fruit in enumerate(fruits, 1):\n    print(f\"{index}. {fruit}\")\n</code></pre> <pre><code># Loop over a list - For loop example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</code></pre> <p>\u27a4 While Loop Example:</p> <pre><code># Print numbers 1 to 5 using while loop\ncount = 1\nwhile count &lt;= 5:\n    print(count)\n    count += 1\n</code></pre> <p>While/Else Loop &amp; Infinite Loop Prevention:</p> <pre><code># While-else loop\ncount = 1\nwhile count &lt;= 3:\n    print(f\"Count: {count}\")\n    count += 1\nelse:\n    print(\"Loop completed successfully!\")\n\n# Infinite loop prevention with safety counter\nsafety_counter = 0\nMAX_ITERATIONS = 1000\n\nwhile True:\n    safety_counter += 1\n    # Your loop logic here\n    if safety_counter &gt;= MAX_ITERATIONS:\n        print(\"Safety break: Maximum iterations reached\")\n        break\n    # Simulating some condition that would normally break the loop\n    if safety_counter &gt;= 5:\n        print(\"Normal break condition met\")\n        break\n    print(f\"Iteration {safety_counter}\")\n\n# Common infinite loop mistake (commented to prevent actual infinite loop)\n# x = 10\n# while x &gt; 0:\n#     print(x)\n#     # Forgot to decrement x - this would run forever!\n</code></pre> <pre><code># Print even numbers from 1 to 10 using while loop\ncount = 1\nwhile count &lt;= 10:\n    if count % 2 == 0:\n        print(count)\n    count += 1\n</code></pre>"},{"location":"lectures/3.ControlStructures/#3-looping-over-tuples-strings-dictionaries","title":"3. Looping Over Tuples, Strings, &amp; Dictionaries","text":"<pre><code># Tuple\ncolors = (\"red\", \"green\", \"blue\")\nfor color in colors:\n    print(color)\n\n# String\nfor char in \"Python\":\n    print(char)\n\n# Dictionary\nstudent = {\"name\": \"Alice\", \"age\": 21}\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n</code></pre> <p>Advanced Looping Techniques:</p> <pre><code># Using zip() to iterate over multiple sequences\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\ncities = [\"New York\", \"London\", \"Tokyo\"]\n\nprint(\"Using zip():\")\nfor name, age, city in zip(names, ages, cities):\n    print(f\"{name} is {age} years old and lives in {city}\")\n\n# Using reversed() to iterate backwards\nprint(\"\\nUsing reversed():\")\nfor fruit in reversed([\"apple\", \"banana\", \"cherry\"]):\n    print(fruit)\n\n# List comprehensions (brief introduction)\nprint(\"\\nList comprehensions:\")\nnumbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]\nprint(f\"Squares: {squares}\")\n\neven_squares = [x**2 for x in numbers if x % 2 == 0]\nprint(f\"Even squares: {even_squares}\")\n\n# Nested list comprehension\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflat_list = [item for row in matrix for item in row]\nprint(f\"Flattened matrix: {flat_list}\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#4-special-loops-forelse","title":"4. Special Loops: for/else","text":""},{"location":"lectures/3.ControlStructures/#the-else-block-after-a-for-loop-executes-if-the-loop-completes-normally-no-break","title":"The <code>else</code> block after a <code>for</code> loop executes if the loop completes normally (no <code>break</code>).","text":"<pre><code># Check if a number is prime\nnum = 7\nfor i in range(2, num):\n    if num % i == 0:\n        print(f\"{num} is not prime.\")\n        break\nelse:\n    print(f\"{num} is prime.\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#5-nested-loops-and-flow-control","title":"5. Nested Loops and Flow Control","text":"<pre><code># Nested loop for multiplication table\nfor i in range(1, 4):\n    for j in range(1, 4):\n        print(f\"{i} x {j} = {i * j}\")\n    print(\"---\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#6-special-statements-pass-continue-break","title":"6. Special Statements: pass, continue, break","text":"<pre><code># pass - placeholder\nfor i in range(3):\n    pass  # Does nothing, placeholder for future code\n\nprint(\"=\" * 5)\n# continue - skip current iteration\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)\nprint(\"=\" * 5)\n# break - exit loop\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)\nprint(\"=\" * 5)\n</code></pre> <p>Error Handling in Loops:</p> <pre><code># Handling errors in loops\nnumbers = [\"1\", \"2\", \"three\", \"4\", \"5\"]\n\nprint(\"Processing numbers with error handling:\")\nfor num_str in numbers:\n    try:\n        num = int(num_str)\n        print(f\"Number: {num}, Square: {num**2}\")\n    except ValueError:\n        print(f\"'{num_str}' is not a valid number, skipping...\")\n\n# Using flags to control loop behavior\nprint(\"\\nUsing flags:\")\nfound = False\ntarget = 3\nnumbers = [1, 2, 3, 4, 5]\n\nfor num in numbers:\n    if num == target:\n        print(f\"Found {target}!\")\n        found = True\n        break\n\nif not found:\n    print(f\"{target} not found in the list\")\n\n# Breaking out of nested loops using functions\ndef find_in_matrix(matrix, target):\n    for i, row in enumerate(matrix):\n        for j, value in enumerate(row):\n            if value == target:\n                return i, j\n    return None\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = find_in_matrix(matrix, 5)\nif result:\n    print(f\"Found at position: {result}\")\nelse:\n    print(\"Not found\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#7-resolving-real-world-problems","title":"7. Resolving Real-World Problems","text":"<p>Let's solve a simple real-world problem using control structures.</p> <pre><code># Simple password validation\ncorrect_password = \"python123\"\nattempts = 3\n\nwhile attempts &gt; 0:\n    pwd = input(\"Enter password: \")\n    if pwd == correct_password:\n        print(\"Access granted!\")\n        break\n    else:\n        print(\"Incorrect password. Try again.\")\n        attempts -= 1\n\nif attempts == 0:\n    print(\"Access denied. Too many failed attempts.\")\n</code></pre>"},{"location":"lectures/3.ControlStructures/#8-matchcase-statement-python-310","title":"8. Match/Case Statement (Python 3.10+)","text":"<p>The <code>match/case</code> statement is Python's version of switch-case from other languages.</p> <pre><code># Basic match/case example\nday = \"Monday\"\n\nmatch day:\n    case \"Monday\":\n        print(\"Start of the work week!\")\n    case \"Tuesday\" | \"Wednesday\" | \"Thursday\":\n        print(\"Midweek days\")\n    case \"Friday\":\n        print(\"TGIF!\")\n    case \"Saturday\" | \"Sunday\":\n        print(\"Weekend!\")\n    case _:\n        print(\"Invalid day\")\n\n# Match with conditions\nscore = 85\n\nmatch score:\n    case x if x &gt;= 90:\n        grade = \"A\"\n    case x if x &gt;= 80:\n        grade = \"B\"\n    case x if x &gt;= 70:\n        grade = \"C\"\n    case x if x &gt;= 60:\n        grade = \"D\"\n    case _:\n        grade = \"F\"\n\nprint(f\"Score: {score}, Grade: {grade}\")\n\n# Match with data structures\ndef process_data(data):\n    match data:\n        case {\"type\": \"user\", \"name\": str(name)}:\n            return f\"Hello, {name}!\"\n        case {\"type\": \"product\", \"name\": str(name), \"price\": float(price)}:\n            return f\"Product: {name}, Price: ${price}\"\n        case list() if len(data) &gt; 0:\n            return f\"List with {len(data)} items\"\n        case _:\n            return \"Unknown data format\"\n\n# Test the function\nprint(process_data({\"type\": \"user\", \"name\": \"Alice\"}))\nprint(process_data({\"type\": \"product\", \"name\": \"Laptop\", \"price\": 999.99}))\nprint(process_data([1, 2, 3, 4, 5]))\n</code></pre> <p>\ud83d\udee0\ufe0f AI Tool: Google Colab - Gemini Or Github Copilot</p> <p>You can explore AI tools like Gemini inside Google Colab to assist with understanding Python code, generating examples, or debugging.</p> <p>Example: - Use Google Colab's built-in chat assistant for hints or suggestions.</p> <ul> <li> <p>Explore AI code completion to speed up your coding.</p> </li> <li> <p>Alternative: Github Copilot</p> </li> </ul> <p>\ud83c\udfaf Quick Recap</p> <ul> <li> <p>Use <code>if</code>, <code>elif</code>, <code>else</code> for decision-making  </p> </li> <li> <p><code>for</code> and <code>while</code> loops help with repetition  </p> </li> <li> <p>Loop over sequences like tuples, strings, dictionaries  </p> </li> <li> <p>Special loop structures: <code>for/else</code> </p> </li> <li> <p>Use <code>pass</code>, <code>continue</code>, <code>break</code> for flow control  </p> </li> <li> <p>Practice solving real-world problems  </p> </li> </ul>"},{"location":"lectures/3.ControlStructures/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p>Basic Exercises:</p> <ol> <li> <p>Write a program that checks whether a number is positive, negative, or zero.</p> </li> <li> <p>Print all even numbers from 1 to 20 using a <code>for</code> loop.</p> </li> <li> <p>Create a simple calculator using <code>if-elif-else</code>.</p> </li> <li> <p>Write a program to validate password input with a maximum of 3 attempts.</p> </li> </ol> <p>Intermediate Exercises:</p> <ol> <li> <p>Create a number guessing game where the computer picks a random number and the user has to guess it.</p> </li> <li> <p>Write a program that prints the multiplication table for any given number.</p> </li> <li> <p>Use nested loops to print patterns like triangles and diamonds.</p> </li> <li> <p>Create a menu-driven program using match/case (if available) or if-elif-else.</p> </li> </ol> <p>Advanced Exercises:</p> <ol> <li> <p>Write a program that finds all prime numbers up to a given number using nested loops.</p> </li> <li> <p>Create a simple ATM system with balance checking, withdrawal, and deposit features.</p> </li> <li> <p>Build a word frequency counter that counts how many times each word appears in a sentence.</p> </li> <li> <p>Write a program that validates user input and keeps asking until valid data is entered.</p> </li> </ol> <p>Challenge Exercises:</p> <ol> <li> <p>Create a simple text-based adventure game using control structures.</p> </li> <li> <p>Build a grade management system that can add, remove, and calculate average grades.</p> </li> <li> <p>Write a program that simulates a simple voting system with candidate validation.</p> </li> <li> <p>Create a loan eligibility checker based on multiple criteria (age, income, credit score).</p> </li> </ol>"},{"location":"lectures/4.DataStructures/","title":"Data Structures","text":""},{"location":"lectures/4.DataStructures/#python-programming-data-structures","title":"\ud83d\udcd3 Python Programming - Data Structures","text":""},{"location":"lectures/4.DataStructures/#1-lists","title":"1. Lists","text":"<p>Lists in Python: - Ordered, mutable (can be changed) collection of items.</p> <ul> <li>Can store mixed data types.</li> </ul> <pre><code># Creating a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits)\n</code></pre> <p>\u27a4 Indexing, Slicing &amp; Negative Indexing:</p> <pre><code># Indexing\nprint(fruits[0])  # First item\nprint(fruits[-1])  # Last item\n\n# Slicing\nprint(fruits[0:2])  # First two items\n</code></pre> <p>\u27a4 Looping Through Lists &amp; Conditions:</p> <pre><code>for fruit in fruits:\n    if fruit.startswith(\"b\"):\n        print(f\"{fruit} starts with 'b'\")\n</code></pre> <p>\u27a4 Useful List Methods:</p> <pre><code># Adding items\nfruits.append(\"orange\")\nprint(fruits)\n\nfruits.insert(1, \"mango\")\nprint(fruits)\n\n# Removing items\nfruits.remove(\"banana\")\nprint(fruits)\n\n# Sorting\nfruits.sort()\nprint(fruits)\n</code></pre> <p>\u27a4 More List Methods &amp; Operations:</p> <pre><code># More list methods\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\nprint(\"Original list:\", numbers)\n\n# Count occurrences\nprint(\"Count of 1:\", numbers.count(1))\n\n# Find index\nprint(\"Index of 4:\", numbers.index(4))\n\n# Extend (vs append)\nnumbers.extend([7, 8])  # Adds multiple items\nprint(\"After extend:\", numbers)\n\n# Reverse\nnumbers.reverse()\nprint(\"After reverse:\", numbers)\n\n# Clear\ntemp_list = [1, 2, 3]\ntemp_list.clear()\nprint(\"After clear:\", temp_list)\n\n# Copy (shallow vs deep)\noriginal = [1, [2, 3], 4]\nshallow_copy = original.copy()\ndeep_copy = original[:]  # Simple way for lists\nprint(\"Original:\", original)\nprint(\"Shallow copy:\", shallow_copy)\n\n# List concatenation and repetition\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\ncombined = list1 + list2\nprint(\"Combined:\", combined)\n\nrepeated = [0] * 5\nprint(\"Repeated:\", repeated)\n</code></pre> <p>\u27a4 List Comprehension with Conditions:</p> <pre><code># Create list of squares for even numbers from 0 to 10\nsquares = [x**2 for x in range(11) if x % 2 == 0]\nprint(squares)\n</code></pre> <p>\u27a4 Nested Lists (2D Lists):</p> <pre><code># Creating a 2D list (matrix)\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(\"Matrix:\", matrix)\n\n# Accessing elements\nprint(\"Element at [1][2]:\", matrix[1][2])\n\n# Iterating through 2D list\nprint(\"All elements:\")\nfor row in matrix:\n    for element in row:\n        print(element, end=\" \")\n    print()  # New line after each row\n\n# Using enumerate for indices\nprint(\"With indices:\")\nfor i, row in enumerate(matrix):\n    for j, element in enumerate(row):\n        print(f\"[{i}][{j}] = {element}\")\n\n# List comprehension for 2D\nflattened = [element for row in matrix for element in row]\nprint(\"Flattened:\", flattened)\n\n# Creating a 2D list with comprehension\nmultiplication_table = [[i * j for j in range(1, 4)] for i in range(1, 4)]\nprint(\"Multiplication table:\", multiplication_table)\n</code></pre>"},{"location":"lectures/4.DataStructures/#2-tuples","title":"2. Tuples","text":"<p>Tuples: - Ordered, immutable collection.</p> <ul> <li> <p>Faster than lists.</p> </li> <li> <p>Suitable for fixed data.</p> </li> </ul> <pre><code># Creating a tuple\ndimensions = (10, 20, 30)\nprint(dimensions)\n\n# Indexing and Slicing\nprint(dimensions[1])\nprint(dimensions[:2])\n\n# Looping\nfor dim in dimensions:\n    print(dim)\n</code></pre> <p>\u27a4 More Tuple Operations:</p> <pre><code># Tuple methods\nnumbers = (1, 2, 3, 2, 4, 2, 5)\nprint(\"Original tuple:\", numbers)\nprint(\"Count of 2:\", numbers.count(2))\nprint(\"Index of 3:\", numbers.index(3))\n\n# Tuple concatenation\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\ncombined = tuple1 + tuple2\nprint(\"Combined tuple:\", combined)\n\n# Tuple repetition\nrepeated = (0,) * 5  # Note the comma for single element tuple\nprint(\"Repeated tuple:\", repeated)\n\n# Single element tuple (important!)\nsingle = (42,)  # Comma is required\nnot_tuple = (42)  # This is just an integer\nprint(\"Single element tuple:\", single, type(single))\nprint(\"Not a tuple:\", not_tuple, type(not_tuple))\n\n# Nested tuples\nnested = ((1, 2), (3, 4), (5, 6))\nprint(\"Nested tuple:\", nested)\nprint(\"Access nested element:\", nested[1][0])\n\n# Named tuples (from collections module)\nfrom collections import namedtuple\n\n# Define a named tuple\nPoint = namedtuple('Point', ['x', 'y'])\nStudent = namedtuple('Student', ['name', 'age', 'grade'])\n\n# Create instances\np = Point(10, 20)\nstudent = Student('Alice', 20, 'A')\n\nprint(\"Point:\", p)\nprint(\"Access by name:\", p.x, p.y)\nprint(\"Student:\", student)\nprint(\"Student name:\", student.name)\n</code></pre> <p>\u27a4 List vs Tuple:</p> <ul> <li> <p>List: Mutable \u2192 You can modify contents.</p> </li> <li> <p>Tuple: Immutable \u2192 Contents cannot be changed.</p> </li> <li> <p>Lists have more built-in methods compared to tuples.</p> </li> <li> <p>Use lists for homogeneous items and tuples for heterogeneous items.</p> </li> </ul> <p>\u27a4 Switching Between Lists and Tuples:</p> <pre><code># List to Tuple\nmy_list = [1, 2, 3]\nmy_tuple = tuple(my_list)\nprint(my_tuple)\n\n# Tuple to List\nnew_list = list(my_tuple)\nprint(new_list)\n</code></pre> <p>\u27a4 Tuple Unpacking:</p> <pre><code>person = (\"Alice\", 25, \"Engineer\")\nname, age, profession = person\nprint(name, age, profession)\n</code></pre>"},{"location":"lectures/4.DataStructures/#3-sets","title":"3. Sets","text":"<p>Sets: - Unordered collection of unique items.</p> <ul> <li>Used for mathematical operations like union, intersection, etc.</li> </ul> <p>\u27a4 Basic Set Operations:</p> <pre><code># Creating sets\ncolors = {\"red\", \"green\", \"blue\"}\nprint(colors)\n\n# Adding, Removing, Discarding\ncolors.add(\"yellow\")\nprint(colors)\n\ncolors.remove(\"green\")  # Raises error if not present\nprint(colors)\n\ncolors.discard(\"purple\")  # No error if not present\nprint(colors)\n</code></pre> <p>\u27a4 More Set Operations &amp; Methods:</p> <pre><code># Set from list (removes duplicates)\nnumbers = [1, 2, 2, 3, 3, 3, 4, 5]\nunique_numbers = set(numbers)\nprint(\"Original list:\", numbers)\nprint(\"Unique set:\", unique_numbers)\n\n# Set methods\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\nprint(\"Set1:\", set1)\nprint(\"Set2:\", set2)\n\n# Union (all elements)\nprint(\"Union (|):\", set1 | set2)\nprint(\"Union method:\", set1.union(set2))\n\n# Intersection (common elements)\nprint(\"Intersection (&amp;):\", set1 &amp; set2)\nprint(\"Intersection method:\", set1.intersection(set2))\n\n# Difference (elements in set1 but not in set2)\nprint(\"Difference (-):\", set1 - set2)\nprint(\"Difference method:\", set1.difference(set2))\n\n# Symmetric difference (elements in either set, but not both)\nprint(\"Symmetric difference (^):\", set1 ^ set2)\nprint(\"Symmetric difference method:\", set1.symmetric_difference(set2))\n\n# Subset and superset checks\nsmall_set = {1, 2}\nprint(\"Is {1, 2} subset of set1?\", small_set.issubset(set1))\nprint(\"Is set1 superset of {1, 2}?\", set1.issuperset(small_set))\n\n# Disjoint sets (no common elements)\nset3 = {10, 11, 12}\nprint(\"Are set1 and set3 disjoint?\", set1.isdisjoint(set3))\n\n# Set comprehension\neven_squares = {x**2 for x in range(10) if x % 2 == 0}\nprint(\"Even squares:\", even_squares)\n</code></pre> <p>\u27a4 Set Operations:</p> <pre><code>a = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\n\nprint(\"Union:\", a | b)\nprint(\"Intersection:\", a &amp; b)\nprint(\"Difference:\", a - b)\n</code></pre> <p>\u27a4 Frozenset vs Set:</p> <ul> <li> <p><code>set</code> \u2192 Mutable  </p> </li> <li> <p><code>frozenset</code> \u2192 Immutable  </p> </li> </ul> <pre><code>fs = frozenset([1, 2, 3])\nprint(fs)\n</code></pre>"},{"location":"lectures/4.DataStructures/#4-dictionaries","title":"4. Dictionaries","text":"<p>Dictionaries: - Collection of key-value pairs.</p> <ul> <li>Keys must be unique.</li> </ul> <p>\u27a4 Creating &amp; Accessing:</p> <pre><code>student = {\"name\": \"Alice\", \"age\": 22, \"grade\": \"A\"}\nprint(student[\"name\"])\n</code></pre> <p>\u27a4 Useful Dictionary Methods:</p> <pre><code># Get with default\nprint(student.get(\"age\"))\nprint(student.get(\"major\", \"Not specified\"))\n\n# Update\nstudent.update({\"grade\": \"A+\", \"major\": \"CS\"})\nprint(student)\n\n# Keys, Values\nprint(student.keys())\nprint(student.values())\n\n# Pop\nstudent.pop(\"age\")\nprint(student)\n</code></pre> <p>\u27a4 More Dictionary Methods &amp; Operations:</p> <pre><code># Dictionary from lists\nkeys = ['name', 'age', 'city']\nvalues = ['Bob', 25, 'London']\nperson = dict(zip(keys, values))\nprint(\"Dictionary from lists:\", person)\n\n# Dictionary methods\ninventory = {'apples': 50, 'bananas': 30, 'cherries': 20}\nprint(\"Original inventory:\", inventory)\n\n# Items, keys, values iteration\nprint(\"Items:\")\nfor item in inventory.items():\n    print(item)\n\nprint(\"Key-value pairs:\")\nfor key, value in inventory.items():\n    print(f\"{key}: {value}\")\n\n# Popitem (removes and returns last item)\nlast_item = inventory.popitem()\nprint(\"Popped item:\", last_item)\nprint(\"After popitem:\", inventory)\n\n# Setdefault (get or set default value)\ninventory.setdefault('oranges', 0)\nprint(\"After setdefault:\", inventory)\n\n# Dictionary merging (Python 3.9+)\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n# merged = dict1 | dict2  # Python 3.9+\nmerged = {**dict1, **dict2}  # Works in older versions\nprint(\"Merged dictionary:\", merged)\n\n# Dictionary with default values\nfrom collections import defaultdict\ndd = defaultdict(int)  # Default value is 0\ndd['a'] += 1\ndd['b'] += 2\nprint(\"Default dict:\", dict(dd))\n\n# Counter (specialized dictionary)\nfrom collections import Counter\ntext = \"hello world\"\nchar_count = Counter(text)\nprint(\"Character count:\", char_count)\nprint(\"Most common:\", char_count.most_common(3))\n</code></pre> <p>\u27a4 Dictionary Comprehension:</p> <pre><code># Squares of numbers\nsquares = {x: x**2 for x in range(5)}\nprint(squares)\n\n# Filtering even squares\neven_squares = {k: v for k, v in squares.items() if v % 2 == 0}\nprint(even_squares)\n</code></pre> <p>\u27a4 Nested Dictionaries:</p> <pre><code># Student with nested details\nstudent = {\n    \"name\": \"Alice\",\n    \"subjects\": {\"Math\": 90, \"Science\": 95}\n}\n\nprint(student[\"subjects\"][\"Math\"])\n</code></pre>"},{"location":"lectures/4.DataStructures/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 Lists \u2192 Ordered, mutable  </p> <p>\u2705 Tuples \u2192 Ordered, immutable  </p> <p>\u2705 Sets \u2192 Unordered, unique items  </p> <p>\u2705 Dictionaries \u2192 Key-value pairs  </p> <p>\u2705 Use list/dictionary comprehension for concise code  </p>"},{"location":"lectures/4.DataStructures/#5-additional-data-structures","title":"5. Additional Data Structures","text":"<p>Python provides several specialized data structures in the <code>collections</code> module:</p> <pre><code># Deque (double-ended queue)\nfrom collections import deque\n\n# Create a deque\ndq = deque([1, 2, 3, 4, 5])\nprint(\"Original deque:\", dq)\n\n# Add to both ends\ndq.appendleft(0)\ndq.append(6)\nprint(\"After adding to both ends:\", dq)\n\n# Remove from both ends\nleft_item = dq.popleft()\nright_item = dq.pop()\nprint(f\"Removed {left_item} from left, {right_item} from right\")\nprint(\"After removal:\", dq)\n\n# Rotate\ndq.rotate(2)  # Rotate right by 2\nprint(\"After rotating right by 2:\", dq)\n\n# OrderedDict (remembers insertion order)\nfrom collections import OrderedDict\nod = OrderedDict()\nod['first'] = 1\nod['second'] = 2\nod['third'] = 3\nprint(\"OrderedDict:\", od)\n\n# Move to end\nod.move_to_end('first')\nprint(\"After moving 'first' to end:\", od)\n\n# ChainMap (combines multiple dictionaries)\nfrom collections import ChainMap\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nchain = ChainMap(dict1, dict2, dict3)\nprint(\"ChainMap:\", chain)\nprint(\"Value of 'a':\", chain['a'])\nprint(\"All keys:\", list(chain.keys()))\n</code></pre>"},{"location":"lectures/4.DataStructures/#6-performance-when-to-use-each-structure","title":"6. Performance &amp; When to Use Each Structure","text":"<p>Time Complexity Comparison:</p> Operation List Tuple Set Dictionary Access by index O(1) O(1) N/A N/A Access by key N/A N/A N/A O(1) Search O(n) O(n) O(1) O(1) Insert O(n) N/A O(1) O(1) Delete O(n) N/A O(1) O(1) <p>When to Use Each: - List: When you need ordered, mutable data with duplicates - Tuple: When you need ordered, immutable data (coordinates, database records) - Set: When you need unique elements and fast membership testing - Dictionary: When you need key-value mapping with fast lookups</p> <pre><code># Practical examples of when to use each structure\n\n# Example 1: Shopping cart (List - ordered, allows duplicates)\nshopping_cart = ['apple', 'banana', 'apple', 'orange']\nprint(\"Shopping cart:\", shopping_cart)\n\n# Example 2: GPS coordinates (Tuple - immutable, fixed structure)\nlocations = [\n    ('New York', 40.7128, -74.0060),\n    ('London', 51.5074, -0.1278),\n    ('Tokyo', 35.6762, 139.6503)\n]\nprint(\"Locations:\", locations)\n\n# Example 3: Unique visitors (Set - no duplicates)\nunique_visitors = {'user1', 'user2', 'user1', 'user3'}\nprint(\"Unique visitors:\", unique_visitors)\n\n# Example 4: User profiles (Dictionary - key-value mapping)\nuser_profiles = {\n    'user1': {'name': 'Alice', 'age': 25},\n    'user2': {'name': 'Bob', 'age': 30},\n    'user3': {'name': 'Charlie', 'age': 35}\n}\nprint(\"User profiles:\", user_profiles)\n\n# Memory usage comparison\nimport sys\nlist_data = [1, 2, 3, 4, 5]\ntuple_data = (1, 2, 3, 4, 5)\nset_data = {1, 2, 3, 4, 5}\ndict_data = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}\n\nprint(f\"List memory: {sys.getsizeof(list_data)} bytes\")\nprint(f\"Tuple memory: {sys.getsizeof(tuple_data)} bytes\")\nprint(f\"Set memory: {sys.getsizeof(set_data)} bytes\")\nprint(f\"Dict memory: {sys.getsizeof(dict_data)} bytes\")\n</code></pre>"},{"location":"lectures/4.DataStructures/#7-converting-between-data-structures","title":"7. Converting Between Data Structures","text":"<p>Converting between different data structures is often necessary:</p> <pre><code># Converting between data structures\noriginal_list = [1, 2, 3, 2, 4, 5]\nprint(\"Original list:\", original_list)\n\n# List to other structures\nlist_to_tuple = tuple(original_list)\nlist_to_set = set(original_list)  # Removes duplicates\nprint(\"List to tuple:\", list_to_tuple)\nprint(\"List to set:\", list_to_set)\n\n# Tuple to other structures\ntuple_to_list = list(list_to_tuple)\ntuple_to_set = set(list_to_tuple)\nprint(\"Tuple to list:\", tuple_to_list)\nprint(\"Tuple to set:\", tuple_to_set)\n\n# Set to other structures\nset_to_list = list(list_to_set)\nset_to_tuple = tuple(list_to_set)\nprint(\"Set to list:\", set_to_list)\nprint(\"Set to tuple:\", set_to_tuple)\n\n# Dictionary conversions\nsample_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(\"Original dict:\", sample_dict)\n\n# Dictionary to lists/tuples/sets\ndict_keys = list(sample_dict.keys())\ndict_values = list(sample_dict.values())\ndict_items = list(sample_dict.items())\nprint(\"Dict keys:\", dict_keys)\nprint(\"Dict values:\", dict_values)\nprint(\"Dict items:\", dict_items)\n\n# Lists to dictionary\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 25, 'Boston']\nlist_to_dict = dict(zip(keys, values))\nprint(\"Lists to dict:\", list_to_dict)\n\n# List of tuples to dictionary\ntuple_list = [('x', 1), ('y', 2), ('z', 3)]\ntuples_to_dict = dict(tuple_list)\nprint(\"Tuples to dict:\", tuples_to_dict)\n\n# String to other structures\ntext = \"hello\"\nstring_to_list = list(text)\nstring_to_tuple = tuple(text)\nstring_to_set = set(text)  # Removes duplicate characters\nprint(\"String to list:\", string_to_list)\nprint(\"String to tuple:\", string_to_tuple)\nprint(\"String to set:\", string_to_set)\n</code></pre>"},{"location":"lectures/4.DataStructures/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p>Basic Exercises:</p> <ol> <li> <p>Create a list of your favorite 5 movies and sort them.</p> </li> <li> <p>Convert a list of numbers to a tuple and unpack the first three numbers.</p> </li> <li> <p>Find common elements between two sets.</p> </li> <li> <p>Create a dictionary for a book with title, author, and year. Add a genre to it.</p> </li> <li> <p>Use dictionary comprehension to map numbers from 1 to 5 to their cubes.</p> </li> </ol> <p>Intermediate Exercises:</p> <ol> <li> <p>Create a 2D list representing a 3x3 matrix and print it row by row.</p> </li> <li> <p>Remove duplicates from a list while preserving order (without using set).</p> </li> <li> <p>Create a word frequency counter using a dictionary.</p> </li> <li> <p>Use set operations to find students taking both Math and Science courses.</p> </li> <li> <p>Implement a simple phone book using nested dictionaries.</p> </li> </ol> <p>Advanced Exercises:</p> <ol> <li> <p>Create a function that flattens a nested list of any depth.</p> </li> <li> <p>Build a simple inventory system using dictionaries and lists.</p> </li> <li> <p>Use collections.Counter to analyze text and find the most common words.</p> </li> <li> <p>Create a student grading system with multiple subjects and calculate averages.</p> </li> <li> <p>Implement a simple cache system using dictionaries.</p> </li> </ol> <p>Challenge Exercises:</p> <ol> <li> <p>Create a data structure to represent a family tree using nested dictionaries.</p> </li> <li> <p>Build a simple database system that can store and query student records.</p> </li> <li> <p>Implement a text-based menu system for a restaurant using data structures.</p> </li> <li> <p>Create a library management system with books, authors, and borrowers.</p> </li> <li> <p>Build a simple social network representation using dictionaries and sets.</p> </li> </ol>"},{"location":"lectures/5.Functions/","title":"Functions","text":""},{"location":"lectures/5.Functions/#python-programming-functions","title":"\ud83d\udcd3 Python Programming - Functions","text":""},{"location":"lectures/5.Functions/#1-defining-functions-with-def-keyword","title":"1. Defining Functions with def Keyword","text":"<p>Functions allow us to group reusable pieces of code.</p> <p>Syntax:</p> <pre><code>def function_name(parameters):\n    # code block\n    return value\n</code></pre> <p>\u27a4 Example:</p> <pre><code># Simple function\ndef greet():\n    print(\"Hello, welcome to Python class!\")\n\ngreet()\n</code></pre>"},{"location":"lectures/5.Functions/#2-parameters-arguments-return-statements","title":"2. Parameters, Arguments &amp; Return Statements","text":"<ul> <li> <p>Parameter: The variable listed inside parentheses in function definition.</p> </li> <li> <p>Argument: The value passed to the function.</p> </li> <li> <p><code>return</code> sends a result back to the caller.</p> </li> </ul> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(5, 3)\nprint(\"Sum:\", result)\n</code></pre>"},{"location":"lectures/5.Functions/#3-returning-multiple-values","title":"3. Returning Multiple Values","text":"<p>You can return multiple values as a tuple.</p> <pre><code>def calculate(x, y):\n    sum_ = x + y\n    diff = x - y\n    multiply = x * y\n    return sum_, diff, multiply\n\ns, d, m = calculate(10, 4)\nprint(\"Sum:\", s)\nprint(\"Difference:\", d)\nprint(\"Multiplication:\", m)\n</code></pre>"},{"location":"lectures/5.Functions/#4-default-keyword-arguments","title":"4. Default &amp; Keyword Arguments","text":"<p>Default arguments: Provide default values if no argument is passed.</p> <p>Keyword arguments: Specify arguments by name during function call.</p> <pre><code># Default argument\ndef greet(name=\"Guest\"):\n    print(f\"Hello, {name}!\")\n\ngreet()\ngreet(\"Alice\")\n\n# Keyword argument\ndef student(name, age):\n    print(f\"Name: {name}, Age: {age}\")\n\nstudent(age=21, name=\"Bob\")\n</code></pre>"},{"location":"lectures/5.Functions/#5-anonymous-functions-lambda","title":"5. Anonymous Functions (lambda)","text":"<p><code>lambda</code> functions are small, one-line anonymous functions.</p> <pre><code># Lambda function for square\nsquare = lambda x: x ** 2\nprint(square(5))\n\n# Lambda with multiple arguments\nadd = lambda a, b: a + b\nprint(add(3, 4))\n</code></pre>"},{"location":"lectures/5.Functions/#6-nested-functions-closures","title":"6. Nested Functions &amp; Closures","text":"<p>You can define functions inside other functions.</p> <p>Closure: Inner function remembers variables from the outer function.</p> <pre><code>def outer():\n    msg = \"Python is fun!\"\n\n    def inner():\n        print(msg)\n\n    return inner\n\nmy_func = outer()\nmy_func()\n</code></pre>"},{"location":"lectures/5.Functions/#7-scopes-in-python-local-global","title":"7. Scopes in Python: Local &amp; Global","text":"<ul> <li> <p>Local Scope: Variables defined inside a function.</p> </li> <li> <p>Global Scope: Variables defined outside all functions.</p> </li> </ul> <p>\u27a4 Example:</p> <pre><code>x = 10  # Global variable\n\ndef show():\n    x = 5  # Local variable\n    print(\"Inside function:\", x)\n\nshow()\nprint(\"Outside function:\", x)\n</code></pre> <p>\u27a4 Global Keyword Example:</p> <pre><code>x = 10\n\ndef modify():\n    global x\n    x = 20\n\nmodify()\nprint(\"After modification:\", x)\n</code></pre>"},{"location":"lectures/5.Functions/#8-variable-arguments-args-and-kwargs","title":"8. Variable Arguments: args and *kwargs","text":"<p><code>*args</code>: Allows a function to accept any number of positional arguments.</p> <p><code>**kwargs</code>: Allows a function to accept any number of keyword arguments.</p> <pre><code># *args example - variable number of positional arguments\ndef sum_all(*args):\n    total = 0\n    for num in args:\n        total += num\n    return total\n\nprint(sum_all(1, 2, 3))\nprint(sum_all(1, 2, 3, 4, 5))\n\n# **kwargs example - variable number of keyword arguments\ndef student_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nstudent_info(name=\"Alice\", age=21, major=\"Computer Science\")\nstudent_info(name=\"Bob\", age=22, major=\"Mathematics\", gpa=3.8)\n\n# Combining regular args, *args, and **kwargs\ndef complex_function(required_arg, *args, **kwargs):\n    print(f\"Required argument: {required_arg}\")\n    print(f\"Additional arguments: {args}\")\n    print(f\"Keyword arguments: {kwargs}\")\n\ncomplex_function(\"Hello\", 1, 2, 3, name=\"Alice\", age=21)\n</code></pre>"},{"location":"lectures/5.Functions/#9-function-annotations-type-hints","title":"9. Function Annotations &amp; Type Hints","text":"<p>Function annotations help specify the expected types of parameters and return values. They improve code readability and enable better IDE support.</p> <pre><code># Function with type hints\ndef add_numbers(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers and return the sum.\"\"\"\n    return a + b\n\ndef greet_user(name: str, age: int) -&gt; str:\n    \"\"\"Create a greeting message for a user.\"\"\"\n    return f\"Hello {name}, you are {age} years old!\"\n\n# Using the annotated functions\nresult = add_numbers(5, 3)\nprint(f\"Sum: {result}\")\n\nmessage = greet_user(\"Alice\", 25)\nprint(message)\n\n# Type hints with complex types\nfrom typing import List, Dict, Optional, Union\n\ndef process_numbers(numbers: List[int]) -&gt; Dict[str, float]:\n    \"\"\"Process a list of numbers and return statistics.\"\"\"\n    return {\n        \"sum\": sum(numbers),\n        \"average\": sum(numbers) / len(numbers),\n        \"max\": max(numbers),\n        \"min\": min(numbers)\n    }\n\ndef find_user(user_id: int) -&gt; Optional[str]:\n    \"\"\"Find a user by ID, return None if not found.\"\"\"\n    users = {1: \"Alice\", 2: \"Bob\", 3: \"Charlie\"}\n    return users.get(user_id)\n\n# Test the functions\nstats = process_numbers([1, 2, 3, 4, 5])\nprint(f\"Statistics: {stats}\")\n\nuser = find_user(2)\nprint(f\"Found user: {user}\")\n\nuser = find_user(99)\nprint(f\"User not found: {user}\")\n</code></pre>"},{"location":"lectures/5.Functions/#10-decorators","title":"10. Decorators","text":"<p>Decorators are a powerful feature that allows you to modify or extend the behavior of functions without changing their code directly.</p> <pre><code># Simple decorator example\ndef timer_decorator(func):\n    import time\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} took {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer_decorator\ndef slow_function():\n    import time\n    time.sleep(1)\n    return \"Function completed\"\n\nresult = slow_function()\nprint(result)\n\n# Decorator with arguments\ndef repeat(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for i in range(times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\n# Built-in decorators\nclass MyClass:\n    @staticmethod\n    def static_method():\n        return \"This is a static method\"\n\n    @classmethod\n    def class_method(cls):\n        return f\"This is a class method of {cls.__name__}\"\n\n    def instance_method(self):\n        return \"This is an instance method\"\n\n# Using the decorated methods\nprint(MyClass.static_method())\nprint(MyClass.class_method())\nobj = MyClass()\nprint(obj.instance_method())\n</code></pre>"},{"location":"lectures/5.Functions/#11-higher-order-functions","title":"11. Higher-Order Functions","text":"<p>Higher-order functions are functions that can take other functions as arguments or return functions as results. Common examples include <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>.</p> <pre><code># map() - applies a function to all items in an iterable\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nprint(f\"Original: {numbers}\")\nprint(f\"Squared: {squared}\")\n\n# filter() - filters items based on a condition\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Even numbers: {even_numbers}\")\n\n# reduce() - applies a function cumulatively to items\nfrom functools import reduce\nsum_all = reduce(lambda x, y: x + y, numbers)\nprint(f\"Sum of all numbers: {sum_all}\")\n\n# Custom higher-order function\ndef apply_operation(numbers, operation):\n    \"\"\"Apply an operation to all numbers in a list.\"\"\"\n    return [operation(num) for num in numbers]\n\ndef double(x):\n    return x * 2\n\ndef cube(x):\n    return x ** 3\n\n# Using the higher-order function\noriginal = [1, 2, 3, 4, 5]\ndoubled = apply_operation(original, double)\ncubed = apply_operation(original, cube)\n\nprint(f\"Original: {original}\")\nprint(f\"Doubled: {doubled}\")\nprint(f\"Cubed: {cubed}\")\n\n# Function that returns a function\ndef create_multiplier(factor):\n    \"\"\"Create a function that multiplies by a specific factor.\"\"\"\n    def multiplier(x):\n        return x * factor\n    return multiplier\n\n# Create specific multiplier functions\ndouble_func = create_multiplier(2)\ntriple_func = create_multiplier(3)\n\nprint(f\"Double 5: {double_func(5)}\")\nprint(f\"Triple 5: {triple_func(5)}\")\n\n# Using with map\nnumbers = [1, 2, 3, 4, 5]\ndoubled_with_map = list(map(double_func, numbers))\nprint(f\"Doubled with map: {doubled_with_map}\")\n</code></pre>"},{"location":"lectures/5.Functions/#12-error-handling-in-functions","title":"12. Error Handling in Functions","text":"<p>Proper error handling makes your functions more robust and user-friendly. Use try-except blocks to handle potential errors gracefully.</p> <pre><code># Function with error handling\ndef safe_divide(a, b):\n    \"\"\"Safely divide two numbers with error handling.\"\"\"\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Error: Cannot divide by zero!\")\n        return None\n    except TypeError:\n        print(\"Error: Both arguments must be numbers!\")\n        return None\n\n# Test the function\nprint(safe_divide(10, 2))  # Normal case\nprint(safe_divide(10, 0))  # Division by zero\nprint(safe_divide(10, \"2\"))  # Type error\n\n# Function with custom exceptions\ndef validate_age(age):\n    \"\"\"Validate age with custom error handling.\"\"\"\n    if not isinstance(age, int):\n        raise TypeError(\"Age must be an integer\")\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    if age &gt; 150:\n        raise ValueError(\"Age seems unrealistic\")\n    return f\"Age {age} is valid\"\n\n# Test validation function\ntry:\n    print(validate_age(25))\n    print(validate_age(-5))\nexcept (TypeError, ValueError) as e:\n    print(f\"Validation error: {e}\")\n\n# Function with multiple error types\ndef process_file(filename):\n    \"\"\"Process a file with comprehensive error handling.\"\"\"\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            return len(content)\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found\")\n        return 0\n    except PermissionError:\n        print(f\"Error: Permission denied to read '{filename}'\")\n        return 0\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return 0\n\n# Test file processing (will show error since file doesn't exist)\nresult = process_file(\"nonexistent.txt\")\nprint(f\"File length: {result}\")\n</code></pre>"},{"location":"lectures/5.Functions/#13-docstrings-and-function-documentation","title":"13. Docstrings and Function Documentation","text":"<p>Docstrings are string literals that document what a function does. They should describe the function's purpose, parameters, return values, and any exceptions it might raise.</p> <pre><code># Function with comprehensive docstring\ndef calculate_bmi(weight, height):\n    \"\"\"\n    Calculate Body Mass Index (BMI) for a person.\n\n    Parameters:\n    -----------\n    weight : float\n        Weight in kilograms\n    height : float\n        Height in meters\n\n    Returns:\n    --------\n    float\n        BMI value rounded to 2 decimal places\n\n    Raises:\n    -------\n    ValueError\n        If weight or height are not positive numbers\n\n    Examples:\n    ---------\n    &gt;&gt;&gt; calculate_bmi(70, 1.75)\n    22.86\n    &gt;&gt;&gt; calculate_bmi(80, 1.80)\n    24.69\n    \"\"\"\n    if weight &lt;= 0 or height &lt;= 0:\n        raise ValueError(\"Weight and height must be positive numbers\")\n\n    bmi = weight / (height ** 2)\n    return round(bmi, 2)\n\n# Test the function\ntry:\n    bmi = calculate_bmi(70, 1.75)\n    print(f\"BMI: {bmi}\")\n\n    # Access the docstring\n    print(\"\\nFunction documentation:\")\n    print(calculate_bmi.__doc__)\n\n    # Use help() to see formatted documentation\n    help(calculate_bmi)\n\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\n# Google-style docstring example\ndef process_data(data, method='mean', ignore_errors=False):\n    \"\"\"\n    Process numerical data using specified method.\n\n    Args:\n        data (list): List of numerical values to process\n        method (str, optional): Processing method ('mean', 'median', 'sum'). \n                               Defaults to 'mean'.\n        ignore_errors (bool, optional): Whether to ignore non-numeric values. \n                                      Defaults to False.\n\n    Returns:\n        float: Processed result based on the specified method\n\n    Raises:\n        ValueError: If method is not supported or data contains non-numeric values\n        TypeError: If data is not a list\n    \"\"\"\n    if not isinstance(data, list):\n        raise TypeError(\"Data must be a list\")\n\n    if not ignore_errors:\n        if not all(isinstance(x, (int, float)) for x in data):\n            raise ValueError(\"All data items must be numeric\")\n    else:\n        data = [x for x in data if isinstance(x, (int, float))]\n\n    if not data:\n        raise ValueError(\"No valid data to process\")\n\n    if method == 'mean':\n        return sum(data) / len(data)\n    elif method == 'median':\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        if n % 2 == 0:\n            return (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2\n        else:\n            return sorted_data[n//2]\n    elif method == 'sum':\n        return sum(data)\n    else:\n        raise ValueError(f\"Unsupported method: {method}\")\n\n# Test the documented function\ntest_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(f\"Mean: {process_data(test_data, 'mean')}\")\nprint(f\"Median: {process_data(test_data, 'median')}\")\nprint(f\"Sum: {process_data(test_data, 'sum')}\")\n\n# Test with mixed data and error handling\nmixed_data = [1, 2, \"3\", 4, 5]\ntry:\n    result = process_data(mixed_data, ignore_errors=True)\n    print(f\"Result with ignored errors: {result}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"lectures/5.Functions/#14-recursion","title":"14. Recursion","text":"<p>Recursion is when a function calls itself to solve a problem. Every recursive function needs a base case (stopping condition) and a recursive case.</p> <pre><code># Classic example: Factorial\ndef factorial(n):\n    \"\"\"Calculate factorial of n using recursion.\"\"\"\n    # Base case\n    if n &lt;= 1:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial(n - 1)\n\nprint(f\"5! = {factorial(5)}\")\nprint(f\"0! = {factorial(0)}\")\n\n# Fibonacci sequence\ndef fibonacci(n):\n    \"\"\"Calculate nth Fibonacci number using recursion.\"\"\"\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(\"Fibonacci sequence:\")\nfor i in range(10):\n    print(f\"F({i}) = {fibonacci(i)}\")\n\n# More efficient Fibonacci with memoization\ndef fibonacci_memo(n, memo={}):\n    \"\"\"Calculate nth Fibonacci number with memoization.\"\"\"\n    if n in memo:\n        return memo[n]\n    if n &lt;= 1:\n        return n\n    else:\n        memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)\n        return memo[n]\n\nprint(f\"\\nOptimized Fibonacci F(30) = {fibonacci_memo(30)}\")\n\n# Recursive function for list sum\ndef recursive_sum(numbers):\n    \"\"\"Calculate sum of a list using recursion.\"\"\"\n    if not numbers:  # Base case: empty list\n        return 0\n    else:  # Recursive case\n        return numbers[0] + recursive_sum(numbers[1:])\n\nnumbers = [1, 2, 3, 4, 5]\nprint(f\"Sum of {numbers} = {recursive_sum(numbers)}\")\n\n# Directory traversal example (conceptual)\ndef count_files(directory_structure):\n    \"\"\"Count files in a nested directory structure.\"\"\"\n    count = 0\n    for item in directory_structure:\n        if isinstance(item, str):  # It's a file\n            count += 1\n        elif isinstance(item, list):  # It's a subdirectory\n            count += count_files(item)\n    return count\n\n# Example directory structure\nstructure = [\n    \"file1.txt\",\n    \"file2.py\",\n    [\"subdir1\", \"file3.txt\", \"file4.py\"],\n    [\"subdir2\", \"file5.txt\", [\"subsubdir\", \"file6.py\"]]\n]\n\nprint(f\"Total files: {count_files(structure)}\")\n\n# Recursive function with proper error handling\ndef power(base, exponent):\n    \"\"\"Calculate base^exponent using recursion.\"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(exponent, int):\n        raise TypeError(\"Base must be a number, exponent must be an integer\")\n\n    if exponent &lt; 0:\n        return 1 / power(base, -exponent)\n    elif exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent - 1)\n\nprint(f\"2^5 = {power(2, 5)}\")\nprint(f\"3^-2 = {power(3, -2)}\")\nprint(f\"5^0 = {power(5, 0)}\")\n</code></pre>"},{"location":"lectures/5.Functions/#15-generators-and-yield","title":"15. Generators and Yield","text":"<p>Generators are special functions that return an iterator. They use the <code>yield</code> keyword instead of <code>return</code> and can pause and resume execution, making them memory-efficient for large datasets.</p> <pre><code># Simple generator function\ndef count_up_to(n):\n    \"\"\"Generator that yields numbers from 1 to n.\"\"\"\n    count = 1\n    while count &lt;= n:\n        yield count\n        count += 1\n\n# Using the generator\ncounter = count_up_to(5)\nprint(\"Using generator with next():\")\nprint(next(counter))\nprint(next(counter))\nprint(next(counter))\n\n# Using generator in a loop\nprint(\"\\nUsing generator in a loop:\")\nfor num in count_up_to(5):\n    print(num)\n\n# Generator for Fibonacci sequence\ndef fibonacci_generator():\n    \"\"\"Generate Fibonacci numbers indefinitely.\"\"\"\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\n# Using Fibonacci generator\nprint(\"\\nFirst 10 Fibonacci numbers:\")\nfib_gen = fibonacci_generator()\nfor i in range(10):\n    print(next(fib_gen))\n\n# Generator with file processing (memory efficient)\ndef read_large_file(filename):\n    \"\"\"Generator to read large files line by line.\"\"\"\n    try:\n        with open(filename, 'r') as file:\n            for line in file:\n                yield line.strip()\n    except FileNotFoundError:\n        yield \"File not found\"\n\n# Example: processing data in chunks\ndef process_data_chunks(data, chunk_size):\n    \"\"\"Generator that yields data in chunks.\"\"\"\n    for i in range(0, len(data), chunk_size):\n        yield data[i:i + chunk_size]\n\n# Test chunk processing\nlarge_data = list(range(1, 21))  # Numbers 1 to 20\nprint(\"\\nProcessing data in chunks of 5:\")\nfor chunk in process_data_chunks(large_data, 5):\n    print(f\"Chunk: {chunk}\")\n\n# Generator expressions (like list comprehensions but for generators)\nsquares_gen = (x**2 for x in range(1, 6))\nprint(\"\\nGenerator expression for squares:\")\nfor square in squares_gen:\n    print(square)\n\n# Generator with conditional logic\ndef even_numbers(start, end):\n    \"\"\"Generator for even numbers in a range.\"\"\"\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            yield num\n\nprint(\"\\nEven numbers from 1 to 10:\")\nfor even in even_numbers(1, 10):\n    print(even)\n\n# Generator that can receive values (advanced)\ndef accumulator():\n    \"\"\"Generator that accumulates sent values.\"\"\"\n    total = 0\n    while True:\n        value = yield total\n        if value is not None:\n            total += value\n\n# Using the accumulator generator\nacc = accumulator()\nnext(acc)  # Start the generator\nprint(f\"\\nAccumulator: {acc.send(10)}\")\nprint(f\"Accumulator: {acc.send(20)}\")\nprint(f\"Accumulator: {acc.send(5)}\")\n\n# Memory comparison: list vs generator\nimport sys\n\n# List comprehension (stores all values in memory)\nlarge_list = [x for x in range(1000)]\nprint(f\"\\nList size: {sys.getsizeof(large_list)} bytes\")\n\n# Generator expression (stores only the current state)\nlarge_gen = (x for x in range(1000))\nprint(f\"Generator size: {sys.getsizeof(large_gen)} bytes\")\n</code></pre>"},{"location":"lectures/5.Functions/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 Functions are reusable code blocks with parameters and return values.  </p> <p>\u2705 Can return multiple values and use default/keyword arguments.  </p> <p>\u2705 Lambda functions create simple anonymous functions.  </p> <p>\u2705 Nested functions, closures, and variable scope concepts.  </p> <p>\u2705 args and *kwargs for variable arguments.  </p> <p>\u2705 Type hints and function annotations improve code clarity.  </p> <p>\u2705 Decorators modify function behavior without changing code.  </p> <p>\u2705 Higher-order functions (map, filter, reduce) for functional programming.  </p> <p>\u2705 Proper error handling and comprehensive documentation.  </p> <p>\u2705 Recursion for problems that can be broken down into smaller parts.  </p> <p>\u2705 Generators and yield for memory-efficient iteration.  </p>"},{"location":"lectures/5.Functions/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p>Basic Level:</p> <ol> <li> <p>Write a function to find the maximum of two numbers.</p> </li> <li> <p>Create a lambda function to calculate the cube of a number.</p> </li> <li> <p>Write a function that returns the sum, product, and difference of two numbers.</p> </li> <li> <p>Use a default argument to greet a user if no name is provided.</p> </li> <li> <p>Demonstrate variable scope by defining a global variable and modifying it inside a function.</p> </li> </ol> <p>Intermediate Level:</p> <ol> <li> <p>Create a function that accepts args and *kwargs to handle variable arguments.</p> </li> <li> <p>Write a decorator that logs function calls and execution time.</p> </li> <li> <p>Implement a recursive function to calculate the nth Fibonacci number.</p> </li> <li> <p>Create a generator function that yields even numbers up to a given limit.</p> </li> <li> <p>Write a function with proper type hints and comprehensive docstring.</p> </li> </ol> <p>Advanced Level:</p> <ol> <li> <p>Build a higher-order function that applies different operations to a list of numbers.</p> </li> <li> <p>Create a closure that maintains state between function calls.</p> </li> <li> <p>Implement a custom decorator with arguments that can modify function behavior.</p> </li> <li> <p>Write a recursive function to traverse a nested dictionary structure.</p> </li> <li> <p>Create a generator that processes large datasets in chunks.</p> </li> </ol> <p>Expert Level:</p> <ol> <li> <p>Build a function registry system using decorators.</p> </li> <li> <p>Implement a memoization decorator for optimizing recursive functions.</p> </li> <li> <p>Create a context manager function using generator syntax.</p> </li> <li> <p>Write a function that uses multiple advanced features (type hints, error handling, logging).</p> </li> <li> <p>Build a simple functional programming toolkit with map, filter, and reduce implementations.</p> </li> </ol>"},{"location":"lectures/6.FileHandling/","title":"File Handling","text":""},{"location":"lectures/6.FileHandling/#python-programming-file-handling","title":"\ud83d\udcd3 Python Programming - File Handling","text":""},{"location":"lectures/6.FileHandling/#1-text-file-operations","title":"1. Text File Operations","text":""},{"location":"lectures/6.FileHandling/#python-provides-easy-ways-to-handle-files-for-reading-and-writing","title":"Python provides easy ways to handle files for reading and writing.","text":"<p>Common File Modes: - <code>'r'</code> \u2192 Read (default)</p> <ul> <li> <p><code>'w'</code> \u2192 Write (overwrites existing file or creates new)</p> </li> <li> <p><code>'a'</code> \u2192 Append (adds to existing file)</p> </li> <li> <p><code>'rb'</code> / <code>'wb'</code> \u2192 Read/Write binary files</p> </li> </ul> <p>\u27a4 Reading a Text File:</p> <pre><code># Writing sample content for demonstration\nwith open(\"../files/sample.txt\", \"w\") as file:\n    file.write(\"Hello, this is a text file.\\nSecond line of text.\")\n\n# Reading file\nwith open(\"../files/sample.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre> <p>\u27a4 Writing to a Text File:</p> <pre><code>with open(\"../files/output.txt\", \"w\") as file:\n    file.write(\"This is a new file.\\nFile handling in Python is easy!\")\n</code></pre> <p>\u27a4 Reading Files Line by Line:</p> <pre><code># Method 1: Using readlines()\nwith open(\"../files/sample.txt\", \"r\") as file:\n    lines = file.readlines()\n    for i, line in enumerate(lines, 1):\n        print(f\"Line {i}: {line.strip()}\")\n\nprint(\"\\n\" + \"=\"*30 + \"\\n\")\n\n# Method 2: Using for loop (memory efficient)\nwith open(\"../files/sample.txt\", \"r\") as file:\n    for line_num, line in enumerate(file, 1):\n        print(f\"Line {line_num}: {line.strip()}\")\n\nprint(\"\\n\" + \"=\"*30 + \"\\n\")\n\n# Method 3: Using readline() - one line at a time\nwith open(\"../files/sample.txt\", \"r\") as file:\n    line = file.readline()\n    while line:\n        print(f\"Read: {line.strip()}\")\n        line = file.readline()\n</code></pre> <p>\u27a4 Error Handling in File Operations:</p> <pre><code># Handling FileNotFoundError\ntry:\n    with open(\"../files/nonexistent.txt\", \"r\") as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print(\"Error: File not found!\")\nexcept PermissionError:\n    print(\"Error: Permission denied!\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n\n# Safe file writing with error handling\ndef safe_write_file(filename, content):\n    try:\n        with open(filename, \"w\") as file:\n            file.write(content)\n        print(f\"Successfully wrote to {filename}\")\n    except PermissionError:\n        print(f\"Error: No permission to write to {filename}\")\n    except Exception as e:\n        print(f\"Error writing file: {e}\")\n\n# Test the function\nsafe_write_file(\"../files/test_write.txt\", \"Hello, World!\")\n\n# Safe file reading function\ndef safe_read_file(filename):\n    try:\n        with open(filename, \"r\") as file:\n            return file.read()\n    except FileNotFoundError:\n        return f\"Error: File '{filename}' not found\"\n    except PermissionError:\n        return f\"Error: No permission to read '{filename}'\"\n    except Exception as e:\n        return f\"Error reading file: {e}\"\n\n# Test the function\ncontent = safe_read_file(\"../files/test_write.txt\")\nprint(content)\n</code></pre>"},{"location":"lectures/6.FileHandling/#2-file-path-handling-with-os-module","title":"2. File Path Handling with os Module","text":"<p>The <code>os</code> module helps work with file paths in a platform-independent way.</p> <pre><code>import os\n\n# Current working directory\nprint(\"Current Directory:\", os.getcwd())\n\n# Create a file path\nfile_path = os.path.join(os.getcwd(), \"output.txt\")\nprint(\"File Path:\", file_path)\n</code></pre> <p>\u27a4 Checking File Existence &amp; Operations:</p> <pre><code># Check if file exists\nif os.path.exists(\"../files/sample.txt\"):\n    print(\"File exists!\")\nelse:\n    print(\"File does not exist.\")\n\n# Get file size\nif os.path.exists(\"../files/sample.txt\"):\n    file_size = os.path.getsize(\"../files/sample.txt\")\n    print(f\"File size: {file_size} bytes\")\n\n# List files in directory\nfiles = os.listdir(\"../files/\")\nprint(\"Files in directory:\", files)\n\n# Create directory if it doesn't exist\nif not os.path.exists(\"../files/new_folder\"):\n    os.makedirs(\"../files/new_folder\")\n    print(\"Directory created!\")\nelse:\n    print(\"Directory already exists!\")\n</code></pre>"},{"location":"lectures/6.FileHandling/#3-working-with-csv-files","title":"3. Working with CSV Files","text":"<p>CSV (Comma-Separated Values): - Simple format for storing tabular data.</p> <ul> <li>Python provides the <code>csv</code> module to work with CSV files.</li> </ul> <p>\u27a4 Reading a CSV File:</p> <pre><code>import csv\n\n# Creating a sample CSV file\nwith open(\"../files/data.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Name\", \"Age\"])\n    writer.writerow([\"Alice\", 23])\n    writer.writerow([\"Bob\", 28])\n\n# Reading the CSV file\nwith open(\"../files/data.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>\u27a4 Using Dictionaries in CSV Files:</p> <pre><code># Writing using DictWriter\nwith open(\"../files/data_dict.csv\", \"w\", newline=\"\") as file:\n    fieldnames = [\"Name\", \"Age\"]\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerow({\"Name\": \"Charlie\", \"Age\": 30})\n    writer.writerow({\"Name\": \"Dana\", \"Age\": 26})\n\n# Reading using DictReader\nwith open(\"../files/data_dict.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row)\n</code></pre>"},{"location":"lectures/6.FileHandling/#4-working-with-json","title":"4. Working with JSON","text":"<p>JSON (JavaScript Object Notation): - Popular data format for exchanging data.</p> <ul> <li>Similar to Python dictionaries.</li> </ul> <p>\u27a4 Reading &amp; Writing JSON:</p> <pre><code>import json\n\n# Python dictionary\nperson = {\"name\": \"Eve\", \"age\": 29, \"skills\": [\"Python\", \"Data Science\"]}\n\n# Writing to JSON file\nwith open(\"../files/person.json\", \"w\") as file:\n    json.dump(person, file)\n\n# Reading JSON file\nwith open(\"../files/person.json\", \"r\") as file:\n    data = json.load(file)\n    print(data)\n</code></pre> <p>\u27a4 Parsing JSON Strings:</p> <pre><code># JSON string\njson_str = '{\"name\": \"Frank\", \"age\": 32}'\n\n# Converting JSON string to dictionary\nperson = json.loads(json_str)\nprint(person[\"name\"])\n</code></pre>"},{"location":"lectures/6.FileHandling/#5-binary-file-handling","title":"5. Binary File Handling","text":"<p>Binary files store data in binary format (images, videos, executables, etc.)</p> <p>\u27a4 Reading &amp; Writing Binary Files:</p> <pre><code># Write binary data\nbinary_data = b\"Hello, this is binary data!\\x00\\x01\\x02\"\n\nwith open(\"../files/binary_file.bin\", \"wb\") as file:\n    file.write(binary_data)\n\n# Read binary data\nwith open(\"../files/binary_file.bin\", \"rb\") as file:\n    data = file.read()\n    print(f\"Binary data: {data}\")\n    print(f\"Data type: {type(data)}\")\n\n# Copy a file using binary mode (useful for images, videos, etc.)\ndef copy_file(source, destination):\n    try:\n        with open(source, \"rb\") as src:\n            with open(destination, \"wb\") as dst:\n                dst.write(src.read())\n        print(f\"File copied from {source} to {destination}\")\n    except FileNotFoundError:\n        print(f\"Source file {source} not found\")\n    except Exception as e:\n        print(f\"Error copying file: {e}\")\n\n# Create a test file and copy it\nwith open(\"../files/test_source.txt\", \"w\") as file:\n    file.write(\"This is a test file to copy.\")\n\ncopy_file(\"../files/test_source.txt\", \"../files/test_copy.txt\")\n</code></pre>"},{"location":"lectures/6.FileHandling/#6-modern-file-handling-with-pathlib","title":"6. Modern File Handling with pathlib","text":"<p><code>pathlib</code> is a modern, object-oriented way to handle file paths (Python 3.4+)</p> <p>\u27a4 Using pathlib for File Operations:</p> <pre><code>from pathlib import Path\n\n# Create Path objects\ncurrent_dir = Path.cwd()\nprint(f\"Current directory: {current_dir}\")\n\n# Create file path\nfile_path = Path(\"../files/pathlib_test.txt\")\nprint(f\"File path: {file_path}\")\n\n# Check if file exists\nprint(f\"File exists: {file_path.exists()}\")\n\n# Create parent directories if they don't exist\nfile_path.parent.mkdir(parents=True, exist_ok=True)\n\n# Write to file using pathlib\nfile_path.write_text(\"Hello from pathlib!\")\n\n# Read from file using pathlib\ncontent = file_path.read_text()\nprint(f\"File content: {content}\")\n\n# Get file information\nif file_path.exists():\n    print(f\"File size: {file_path.stat().st_size} bytes\")\n    print(f\"File name: {file_path.name}\")\n    print(f\"File extension: {file_path.suffix}\")\n    print(f\"Parent directory: {file_path.parent}\")\n\n# List files in directory\nfiles_dir = Path(\"../files\")\nif files_dir.exists():\n    print(\"\\nFiles in directory:\")\n    for file in files_dir.iterdir():\n        if file.is_file():\n            print(f\"  \ud83d\udcc4 {file.name}\")\n        elif file.is_dir():\n            print(f\"  \ud83d\udcc1 {file.name}/\")\n\n# Find files by pattern\nprint(\"\\nText files:\")\nfor txt_file in files_dir.glob(\"*.txt\"):\n    print(f\"  \ud83d\udcc4 {txt_file.name}\")\n\n# Working with different path parts\nsample_path = Path(\"/home/user/documents/file.txt\")\nprint(f\"\\nPath parts:\")\nprint(f\"  Root: {sample_path.root}\")\nprint(f\"  Parts: {sample_path.parts}\")\nprint(f\"  Parent: {sample_path.parent}\")\nprint(f\"  Name: {sample_path.name}\")\nprint(f\"  Stem: {sample_path.stem}\")\nprint(f\"  Suffix: {sample_path.suffix}\")\n</code></pre>"},{"location":"lectures/6.FileHandling/#7-practical-file-handling-examples","title":"7. Practical File Handling Examples","text":"<p>\u27a4 Log File Processing:</p> <pre><code># Create a sample log file\nlog_content = \"\"\"2024-01-15 10:30:25 INFO User logged in\n2024-01-15 10:31:15 ERROR Failed to connect to database\n2024-01-15 10:32:45 INFO Database connection restored\n2024-01-15 10:33:20 WARNING High memory usage detected\n2024-01-15 10:34:10 INFO User logged out\"\"\"\n\nwith open(\"../files/app.log\", \"w\") as file:\n    file.write(log_content)\n\n# Process log file\ndef analyze_log_file(filename):\n    log_stats = {\"INFO\": 0, \"ERROR\": 0, \"WARNING\": 0}\n\n    try:\n        with open(filename, \"r\") as file:\n            for line in file:\n                if \"INFO\" in line:\n                    log_stats[\"INFO\"] += 1\n                elif \"ERROR\" in line:\n                    log_stats[\"ERROR\"] += 1\n                elif \"WARNING\" in line:\n                    log_stats[\"WARNING\"] += 1\n\n        return log_stats\n    except FileNotFoundError:\n        return \"Log file not found\"\n\n# Analyze the log\nstats = analyze_log_file(\"../files/app.log\")\nprint(\"Log Analysis:\")\nfor level, count in stats.items():\n    print(f\"  {level}: {count} messages\")\n\n# Filter errors from log\ndef extract_errors(log_file, error_file):\n    try:\n        with open(log_file, \"r\") as infile, open(error_file, \"w\") as outfile:\n            for line in infile:\n                if \"ERROR\" in line:\n                    outfile.write(line)\n        print(f\"Errors extracted to {error_file}\")\n    except FileNotFoundError:\n        print(f\"Log file {log_file} not found\")\n\nextract_errors(\"../files/app.log\", \"../files/errors.log\")\n</code></pre> <p>\u27a4 Configuration File Handling:</p> <pre><code># Create a configuration file\nconfig = {\n    \"database\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"username\": \"admin\"\n    },\n    \"app\": {\n        \"name\": \"MyApp\",\n        \"version\": \"1.0.0\",\n        \"debug\": True\n    }\n}\n\n# Save configuration\nwith open(\"../files/config.json\", \"w\") as file:\n    json.dump(config, file, indent=2)\n\n# Load and use configuration\ndef load_config(filename):\n    try:\n        with open(filename, \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(f\"Config file {filename} not found\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Invalid JSON in {filename}\")\n        return None\n\n# Load configuration\napp_config = load_config(\"../files/config.json\")\nif app_config:\n    print(f\"App Name: {app_config['app']['name']}\")\n    print(f\"Database Host: {app_config['database']['host']}\")\n    print(f\"Debug Mode: {app_config['app']['debug']}\")\n\n# Update configuration\ndef update_config(filename, section, key, value):\n    config = load_config(filename)\n    if config:\n        config[section][key] = value\n        with open(filename, \"w\") as file:\n            json.dump(config, file, indent=2)\n        print(f\"Updated {section}.{key} = {value}\")\n\n# Update debug mode\nupdate_config(\"../files/config.json\", \"app\", \"debug\", False)\n</code></pre> <p>Example Prompt to ChatGPT: ``` \"Generate Python code to read a JSON file containing student records and print their names.\"</p>"},{"location":"lectures/6.FileHandling/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 File operations: reading, writing, appending, line-by-line processing</p> <p>\u2705 Error handling: try-except blocks for robust file operations</p> <p>\u2705 Use <code>os</code> module for file path handling and file system operations</p> <p>\u2705 CSV files: <code>csv.reader</code>, <code>csv.writer</code>, and dictionaries</p> <p>\u2705 JSON: Read, write, parse structured data</p> <p>\u2705 Binary files: handling images, executables, and other binary data</p> <p>\u2705 Modern <code>pathlib</code>: object-oriented file path handling</p> <p>\u2705 Practical examples: log processing, configuration files</p>"},{"location":"lectures/6.FileHandling/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<p>Basic Level:</p> <ol> <li> <p>Write a program to create a text file with your name and age.</p> </li> <li> <p>Read the file you just created and print its contents.</p> </li> <li> <p>Create a CSV file with three student records (name, age, grade).</p> </li> <li> <p>Read and print all names from the CSV file.</p> </li> <li> <p>Write a program to save a dictionary as a JSON file and read it back.</p> </li> </ol> <p>Intermediate Level:</p> <ol> <li> <p>Write a program that reads a text file line by line and counts the number of lines.</p> </li> <li> <p>Create a program that handles FileNotFoundError when trying to read a non-existent file.</p> </li> <li> <p>Write a function that copies a file from one location to another using binary mode.</p> </li> <li> <p>Use pathlib to create a directory and list all .txt files in it.</p> </li> <li> <p>Create a log analyzer that counts different log levels (INFO, ERROR, WARNING).</p> </li> </ol> <p>Advanced Level:</p> <ol> <li> <p>Write a program that reads a large file efficiently without loading it entirely into memory.</p> </li> <li> <p>Create a configuration manager that loads, updates, and saves JSON configuration files.</p> </li> <li> <p>Write a file backup system that creates timestamped backups of important files.</p> </li> <li> <p>Build a CSV data processor that filters and transforms data before saving.</p> </li> <li> <p>Create a file monitor that tracks changes in a directory and logs them.</p> </li> </ol>"},{"location":"lectures/7.OOP/","title":"7.OOP","text":""},{"location":"lectures/7.OOP/#python-programming-object-oriented-programming-oop","title":"\ud83d\udcd3 Python Programming - Object-Oriented Programming (OOP)","text":""},{"location":"lectures/7.OOP/#1-classes-objects","title":"\ud83d\udfe2 1. Classes &amp; Objects","text":"<p>What is OOP?</p> <ul> <li> <p>Organizes code around real-world entities (objects).</p> </li> <li> <p>Class: Blueprint for creating objects.</p> </li> <li> <p>Object: An instance of a class.</p> </li> </ul> <pre><code># Defining a class\nclass Student:\n    pass\n\n# Creating an object\ns1 = Student()\nprint(type(s1))\n</code></pre>"},{"location":"lectures/7.OOP/#2-class-vs-object-attributes","title":"\ud83d\udfe2 2. Class vs Object Attributes","text":"<ul> <li> <p>Class attributes: Shared by all objects.</p> </li> <li> <p>Object attributes: Unique to each object.</p> </li> </ul> <p>\u27a4 Example:</p> <pre><code>class Student:\n    college = \"Westcliff University\"  # Class attribute\n\n    def __init__(self, name, age):\n        self.name = name  # Object attribute\n        self.age = age\n\ns1 = Student(\"Alice\", 20)\ns2 = Student(\"Bob\", 22)\n\nprint(s1.name, s1.college)\nprint(s2.name, s2.college)\n</code></pre>"},{"location":"lectures/7.OOP/#3-initializing-object-attributes-with-__init__","title":"\ud83d\udfe2 3. Initializing Object Attributes with <code>__init__()</code>","text":"<p><code>__init__()</code> is a special method that runs when an object is created. (Like Constructor)</p> <p>\u27a4 Example:</p> <pre><code>class Car:\n    def __init__(self, brand, year):\n        self.brand = brand\n        self.year = year\n\nc1 = Car(\"Toyota\", 2020)\nprint(c1.brand, c1.year)\n</code></pre>"},{"location":"lectures/7.OOP/#4-the-self-keyword","title":"\ud83d\udfe2 4. The <code>self</code> Keyword","text":"<ul> <li> <p>Refers to the current object.</p> </li> <li> <p>Used to access object attributes and methods.</p> </li> </ul> <p>\u27a4 Example:</p> <pre><code>class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        print(f\"{self.name} says Woof!\")\n\nd = Dog(\"Buddy\")\nd.speak()\n</code></pre>"},{"location":"lectures/7.OOP/#5-inheritance","title":"\ud83d\udfe2 5. Inheritance","text":"<p>Inheritance allows a class to use properties and methods of another class.</p> <p>Types: - Single Inheritance</p> <ul> <li> <p>Multiple Inheritance</p> </li> <li> <p>Multi-Level Inheritance</p> </li> </ul> <p>\u27a4 Single Inheritance:</p> <pre><code>class Animal:\n    def speak(self):\n        print(\"Animal sound\")\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nd = Dog()\nd.speak()\nd.bark()\n</code></pre> <p>\u27a4 Multiple Inheritance:</p> <pre><code>class A:\n    def show_a(self):\n        print(\"A\")\n\nclass B:\n    def show_b(self):\n        print(\"B\")\n\nclass C(A, B):\n    pass\n\nc = C()\nc.show_a()\nc.show_b()\n</code></pre> <p>\u27a4 Multi-Level Inheritance:</p> <pre><code>class Grandparent:\n    def grandparent_func(self):\n        print(\"Grandparent\")\n\nclass Parent(Grandparent):\n    def parent_func(self):\n        print(\"Parent\")\n\nclass Child(Parent):\n    def child_func(self):\n        print(\"Child\")\n\nc = Child()\nc.grandparent_func()\nc.parent_func()\nc.child_func()\n</code></pre>"},{"location":"lectures/7.OOP/#6-polymorphism-operator-overloading","title":"\ud83d\udfe2 6. Polymorphism &amp; Operator Overloading","text":""},{"location":"lectures/7.OOP/#polymorphism","title":"Polymorphism:","text":"<ul> <li>Same function name but different behaviors.</li> </ul>"},{"location":"lectures/7.OOP/#operator-overloading","title":"Operator Overloading:","text":"<ul> <li>Using special methods to define how operators behave for custom objects.</li> </ul> <p>\u27a4 Polymorphism Example:</p> <pre><code>class Cat:\n    def sound(self):\n        print(\"Meow\")\n\nclass Dog:\n    def sound(self):\n        print(\"Woof\")\n\nanimals = [Cat(), Dog()]\nfor animal in animals:\n    animal.sound()\n</code></pre> <p><code>Traditional Overloading Does Not Work in Python</code></p> <pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n\ndef greet(name, age):\n    print(f\"Hello, {name}! You are {age} years old.\")\n\ngreet(\"Alice\")  # \u274c TypeError: greet() missing 1 required positional argument: 'age'\n</code></pre> <p>But there is some work around this. Discuss how to implement function overloading in Python using default arguments or variable-length arguments.</p> <p>\u27a4 Operator Overloading Example:</p> <pre><code>class Point:\n    def __init__(self, x):\n        self.x = x\n\n    def __add__(self, other):\n        return Point(self.x + other.x)\n\np1 = Point(5)\np2 = Point(10)\nresult = p1 + p2\nprint(result.x)\n</code></pre>"},{"location":"lectures/7.OOP/#7-function-overriding-encapsulation","title":"\ud83d\udfe2 7. Function Overriding &amp; Encapsulation","text":""},{"location":"lectures/7.OOP/#function-overriding","title":"Function Overriding:","text":"<ul> <li>Child class redefines a method from the parent class.</li> </ul>"},{"location":"lectures/7.OOP/#encapsulation","title":"Encapsulation:","text":"<ul> <li>Restricts direct access to variables using private/protected attributes.</li> </ul> <p>\u27a4 Function Overriding Example:</p> <pre><code>class Animal:\n    def speak(self):\n        print(\"Animal sound\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(\"Woof!\")\n\nd = Dog()\nd.speak()\n</code></pre> <p>\u27a4 Encapsulation Example:</p> <pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def get_balance(self):\n        return self.__balance\n\n    def deposit(self, amount):\n        self.__balance += amount\n\nacc = BankAccount(1000)\nacc.deposit(500)\nprint(acc.get_balance())\n</code></pre>"},{"location":"lectures/7.OOP/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 OOP models real-world entities with classes and objects  </p> <p>\u2705 Class attributes shared, object attributes unique  </p> <p>\u2705 Inheritance promotes code reuse  </p> <p>\u2705 Polymorphism enables flexibility  </p> <p>\u2705 Operator overloading customizes behavior  </p> <p>\u2705 Function overriding &amp; encapsulation provide safety and control  </p>"},{"location":"lectures/7.OOP/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<ol> <li> <p>Create a <code>Car</code> class with brand and year, and display details using a method.</p> </li> <li> <p>Demonstrate single inheritance with <code>Animal</code> \u2192 <code>Bird</code>.</p> </li> <li> <p>Create a class <code>Rectangle</code> that overloads <code>+</code> to add areas of two rectangles.</p> </li> <li> <p>Use encapsulation to hide a bank account's balance and provide methods to deposit/withdraw.</p> </li> <li> <p>Demonstrate function overriding using a parent-child class structure.</p> </li> </ol>"},{"location":"lectures/8.ErrorDebugging/","title":"8.ErrorDebugging","text":""},{"location":"lectures/8.ErrorDebugging/#python-programming-error-handling-and-debugging","title":"\ud83d\udcd3 Python Programming - Error Handling and Debugging","text":""},{"location":"lectures/8.ErrorDebugging/#1-try-except-blocks","title":"\ud83d\udfe2 1. Try-Except Blocks","text":"<p>Error handling prevents programs from crashing due to unexpected issues.</p> <p>The basic structure:</p> <pre><code>try:\n    # Code that might raise an error\nexcept:\n    # Code to handle the error\n\n\n\u27a4 **Example:**\n\n\n\n```python\ntry:\n    num = int(input(\"Enter a number: \"))\n    print(f\"Square: {num**2}\")\nexcept Exception as e:\n    print(\"Invalid input! Please enter a number.\\nException:\", e)\n</code></pre>"},{"location":"lectures/8.ErrorDebugging/#2-catching-specific-exceptions","title":"\ud83d\udfe2 2. Catching Specific Exceptions","text":"<p><code>It's better to catch specific exceptions to handle different errors appropriately.</code></p> <pre><code>try:\n    num = int(input(\"Enter a number: \"))\n    result = 10 / num\nexcept ValueError:\n    print(\"Please enter a valid number.\")\nexcept ZeroDivisionError:\n    print(\"Division by zero is not allowed.\")\nexcept Exception as e:\n    print(\"An unexpected error occurred:\", e)\n</code></pre>"},{"location":"lectures/8.ErrorDebugging/#3-using-else-finally","title":"\ud83d\udfe2 3. Using else &amp; finally","text":"<ul> <li> <p>else: Runs if no exceptions occur.  </p> </li> <li> <p>finally: Runs no matter what (cleanup code).</p> </li> </ul> <pre><code>try:\n    num = int(input(\"Enter a positive number: \"))\nexcept ValueError:\n    print(\"Invalid input.\")\nelse:\n    print(f\"You entered: {num}\")\nfinally:\n    print(\"This always runs.\")\n</code></pre>"},{"location":"lectures/8.ErrorDebugging/#4-generating-and-creating-custom-exceptions","title":"\ud83d\udfe2 4. Generating and Creating Custom Exceptions","text":"<ul> <li> <p>You can use <code>raise</code> to generate exceptions.</p> </li> <li> <p>Custom exceptions are created by defining a new class that inherits from <code>Exception</code>.</p> </li> </ul> <p>\u27a4 Raising Exceptions Example:</p> <pre><code>age = -5\n\nif age &lt; 0:\n    raise ValueError(\"Age cannot be negative.\")\n</code></pre> <p>\u27a4 Custom Exception Example:</p> <pre><code>class NegativeAgeError(Exception):\n    pass\n\nage = -5\n\ntry:\n    if age &lt; 0:\n        raise NegativeAgeError(\"Age cannot be negative.\")\nexcept NegativeAgeError as e:\n    print(e)\n</code></pre>"},{"location":"lectures/8.ErrorDebugging/#5-problem-solving-strategies","title":"\ud83d\udfe2 5. Problem-Solving Strategies","text":"<p>\u2705 Understand the error message.  </p> <p>\u2705 Use print statements or debugging tools to trace the problem.  </p> <p>\u2705 Break the code into smaller parts.  </p> <p>\u2705 Handle exceptions gracefully using try-except blocks.  </p> <p>\u2705 Anticipate common errors (e.g., invalid input, division by zero).  </p> <p>\u2705 Write custom exceptions for specific situations.  </p>"},{"location":"lectures/8.ErrorDebugging/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 Use try-except to catch errors and prevent crashes.  </p> <p>\u2705 Catch specific exceptions for better error handling.  </p> <p>\u2705 else and finally provide structured error handling.  </p> <p>\u2705 Custom exceptions allow for clear, descriptive error messages.  </p> <p>\u2705 Debugging is an essential skill for reliable code.  </p>"},{"location":"lectures/8.ErrorDebugging/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<ol> <li>Write a program that asks for two numbers and divides them. Handle:</li> <li> <p>ValueError for invalid inputs</p> </li> <li> <p>ZeroDivisionError for division by zero</p> </li> <li> <p>Create a custom exception called <code>PasswordTooShortError</code> if the entered password is less than 8 characters.</p> </li> <li> <p>Demonstrate the use of <code>else</code> and <code>finally</code> in a simple program that reads a file.</p> </li> <li> <p>Intentionally raise an exception if a negative number is entered for age.</p> </li> </ol>"},{"location":"lectures/9.AdvancedConcepts/","title":"9.AdvancedConcepts","text":""},{"location":"lectures/9.AdvancedConcepts/#python-programming-advanced-python-concepts","title":"\ud83d\udcd3 Python Programming - Advanced Python Concepts","text":""},{"location":"lectures/9.AdvancedConcepts/#1-lambda-functions-anonymous-functions","title":"\ud83d\udfe2 1. Lambda Functions (Anonymous Functions)","text":"<ul> <li> <p><code>lambda</code> creates small, one-line, anonymous functions.</p> </li> <li> <p>Often used with <code>map()</code>, <code>filter()</code>, <code>sorted()</code>, etc.</p> </li> </ul> <p>\u27a4 Example:</p> <pre><code># Regular function\ndef square(x):\n    return x ** 2\n\nprint(square(5))\n\n# Lambda function\nsquare_lambda = lambda x: x ** 2\nprint(square_lambda(5))\n</code></pre>"},{"location":"lectures/9.AdvancedConcepts/#2-generators-iterators","title":"\ud83d\udfe2 2. Generators &amp; Iterators","text":"<p>Generators: - Use <code>yield</code> to produce a sequence of values lazily (one at a time).</p> <ul> <li>Saves memory compared to lists.</li> </ul> <p>Iterators: - Any object with <code>__iter__()</code> and <code>__next__()</code> methods.</p> <p>\u27a4 Generator Example:</p> <pre><code>def count_up_to(n):\n    count = 1\n    while count &lt;= n:\n        yield count\n        count += 1\nprint(count_up_to(5))  # This will print a generator object\nprint(list(count_up_to(5)))\nfor num in count_up_to(5):\n    print(num)\n</code></pre> <p>\u27a4 Iterator Example:</p> <pre><code>nums = [1, 2, 3]\nit = iter(nums)\n\nprint(next(it))\nprint(next(it))\nprint(next(it))\n</code></pre>"},{"location":"lectures/9.AdvancedConcepts/#3-list-comprehensions","title":"\ud83d\udfe2 3. List Comprehensions","text":"<p><code>A concise way to create lists in a single line.</code></p> <p>\u27a4 Example:</p> <pre><code># Without list comprehension\nsquares = []\nfor i in range(5):\n    squares.append(i ** 2)\nprint(squares)\n\n# With list comprehension\nsquares = [i ** 2 for i in range(5)]\nprint(squares)\n\n# With condition\nevens = [i for i in range(10) if i % 2 == 0]\nprint(evens)\n</code></pre>"},{"location":"lectures/9.AdvancedConcepts/#4-working-with-args-and-kwargs","title":"\ud83d\udfe2 4. Working with args and *kwargs","text":"<ul> <li> <p><code>*args</code>: Allows variable number of positional arguments.</p> </li> <li> <p><code>**kwargs</code>: Allows variable number of keyword arguments.</p> </li> </ul> <p>\u27a4 Example with *args:</p> <pre><code>def add(*numbers):\n    total = sum(numbers)\n    print(\"Sum:\", total)\n\nadd(1, 2, 3)\nadd(4, 5)\n</code></pre> <p>\u27a4 Example with **kwargs:</p> <pre><code>def student_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nstudent_info(name=\"Alice\", age=21, grade=\"A\")\n</code></pre> <p>\u27a4 Using map() Function:</p> <pre><code>nums = [1, 2, 3, 4]\nsquared = list(map(lambda x: x ** 2, nums))\nprint(squared)\n</code></pre> <p>\u27a4 Using filter() Function:</p> <pre><code>nums = [1, 2, 3, 4, 5, 6]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens)\n</code></pre> <p>\u27a4 Using reduce() Function - <code>reduce()</code> applies a function cumulatively to the items of a sequence.</p> <ul> <li>It is part of the <code>functools</code> module.</li> </ul> <pre><code>from functools import reduce\n\n# Multiply all numbers in a list\nnums = [1, 2, 3, 4]\n\nproduct = reduce(lambda x, y: x * y, nums)\nprint(product)\n</code></pre> <pre><code>nums = [5, 10, 15]\n\ntotal_sum = reduce(lambda x, y: x + y, nums)\nprint(total_sum)\n</code></pre> <p>\u27a4 Using enumerate():</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor index, fruit in enumerate(fruits, start=1):\n    print(index, fruit)\n</code></pre>"},{"location":"lectures/9.AdvancedConcepts/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"<p>\u2705 <code>map()</code>: Apply function to all items  </p> <p>\u2705 <code>filter()</code>: Filter items based on condition  </p> <p>\u2705 <code>reduce()</code>: Cumulatively apply function to reduce a sequence to a single value  </p> <p>\u2705 Lambda: One-line anonymous functions  </p> <p>\u2705 Generators: Produce values lazily with <code>yield</code> </p> <p>\u2705 Iterators: Objects used to iterate over sequences  </p> <p>\u2705 List comprehensions: Compact way to build lists  </p> <p>\u2705 args, *kwargs: Flexible argument handling  </p>"},{"location":"lectures/9.AdvancedConcepts/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":"<ol> <li> <p>Write a lambda function to multiply two numbers.</p> </li> <li> <p>Create a generator that yields even numbers from 1 to 10.</p> </li> <li> <p>Use list comprehension to create a list of squares for numbers 1 to 5.</p> </li> <li> <p>Write a function that accepts any number of arguments and prints their sum using *args.</p> </li> <li> <p>Write a function that accepts student details as keyword arguments and prints them.</p> </li> <li> <p>Use <code>map()</code> and <code>filter()</code> to square numbers and filter odd numbers from a list.</p> </li> </ol>"},{"location":"lectures/Installation/","title":"Installation Guide","text":""},{"location":"lectures/Installation/#installation-setup-guide","title":"Installation Setup Guide","text":"<p>Quick setup for Python development with Git and VS Code.</p>"},{"location":"lectures/Installation/#what-well-install","title":"What We'll Install:","text":"<ul> <li> <p>Python - Programming language</p> </li> <li> <p>Git - Version control </p> </li> <li> <p>SSH Keys - Secure authentication</p> </li> <li> <p>VS Code - Code editor</p> </li> </ul>"},{"location":"lectures/Installation/#python-installation","title":"Python Installation","text":""},{"location":"lectures/Installation/#windows","title":"\ud83e\ude9f Windows","text":"<ol> <li> <p>Go to https://www.python.org/downloads/</p> </li> <li> <p>Click \"Download Python 3.x.x\"</p> </li> <li> <p>Run the installer</p> </li> <li> <p>Check \"Add Python to PATH\"</p> </li> <li> <p>Click \"Install Now\"</p> </li> </ol> <p>If needed, run this command in PowerShell as Administrator:</p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>"},{"location":"lectures/Installation/#linux-ubuntudebian","title":"\ud83d\udc27 Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre>"},{"location":"lectures/Installation/#macos","title":"\ud83c\udf4e macOS","text":"<pre><code># Install Homebrew first if needed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Python\nbrew install python\n</code></pre> <p>Verify installation: <pre><code>python --version\npip --version\n</code></pre></p>"},{"location":"lectures/Installation/#git-installation-setup","title":"Git Installation &amp; Setup","text":""},{"location":"lectures/Installation/#install-git","title":"Install Git","text":"<p>\ud83e\ude9f Windows: Download from https://git-scm.com/download/win and install</p> <p>\ud83d\udc27 Linux: <pre><code>sudo apt install git\n</code></pre></p> <p>\ud83c\udf4e macOS: <pre><code>brew install git\n</code></pre></p>"},{"location":"lectures/Installation/#configure-git","title":"Configure Git","text":"<pre><code>git config --global user.name \"GithubUsername\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre>"},{"location":"lectures/Installation/#setup-ssh-key","title":"Setup SSH Key","text":"<pre><code># Generate SSH key\nssh-keygen -t ed25519 -C \"your.email@example.com\"\n\n# Test connection\nssh -T git@github.com\n</code></pre> <p>Add your SSH key to GitHub:</p> <ol> <li> <p>Copy the public key: <code>cat ~/.ssh/id_ed25519.pub</code> </p> <ul> <li>C:\\Users\\path.ssh\\id_ed25519.pub(For Windows)</li> </ul> </li> <li> <p>Go to GitHub Settings \u2192 SSH Keys</p> </li> <li> <p>Paste and save</p> </li> </ol>"},{"location":"lectures/Installation/#vs-code-setup","title":"VS Code Setup","text":""},{"location":"lectures/Installation/#install-vs-code","title":"Install VS Code","text":"<ol> <li> <p>Go to https://code.visualstudio.com/</p> </li> <li> <p>Download for your operating system</p> </li> <li> <p>Install with default settings</p> </li> </ol>"},{"location":"lectures/Installation/#essential-extensions","title":"Essential Extensions","text":"<p>Install these extensions for Python development:</p> <ul> <li> <p>Python (Microsoft)</p> </li> <li> <p>Pylance (Microsoft)</p> </li> <li> <p>Python Extension Pack (Microsoft)</p> </li> <li> <p>GitLens (GitKraken)</p> </li> <li> <p>Jupyter (Microsoft)</p> </li> </ul> <p>How to install extensions:</p> <ol> <li> <p>Open VS Code</p> </li> <li> <p>Click Extensions icon (squares) on left sidebar</p> </li> <li> <p>Search for extension name</p> </li> <li> <p>Click \"Install\"</p> </li> </ol>"},{"location":"lectures/Installation/#virtual-environment-setup","title":"Virtual Environment Setup","text":""},{"location":"lectures/Installation/#create-virtual-environment","title":"Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv env\n\n# Activate virtual environment\n# Windows:\nenv\\Scripts\\activate\n\n# Linux/macOS:\nsource env/bin/activate\n</code></pre>"},{"location":"lectures/Installation/#install-packages-in-virtual-environment","title":"Install Packages in Virtual Environment","text":"<pre><code># After activating virtual environment\npip install uv\n\nuv pip install ipykernel numpy pandas matplotlib\n\n# To deactivate virtual environment\ndeactivate\n</code></pre>"},{"location":"lectures/Installation/#jupyter-notebooks-in-vs-code","title":"Jupyter Notebooks in VS Code","text":""},{"location":"lectures/Installation/#create-jupyter-notebook-in-vs-code","title":"Create Jupyter Notebook in VS Code","text":"<ol> <li> <p>Open VS Code</p> </li> <li> <p>Create new file: <code>Ctrl+N</code> (Windows/Linux) or <code>Cmd+N</code> (Mac)</p> </li> <li> <p>Save as <code>.ipynb</code> file: <code>Ctrl+S</code> \u2192 name it <code>test.ipynb</code></p> </li> <li> <p>VS Code will automatically open it as a Jupyter notebook</p> </li> </ol>"},{"location":"lectures/Installation/#select-python-kernel","title":"Select Python Kernel","text":"<ol> <li> <p>Click \"Select Kernel\" in top-right of notebook</p> </li> <li> <p>Choose \"Python Environments\"</p> </li> <li> <p>Select your virtual environment or system Python</p> </li> <li> <p>Start coding in cells!</p> </li> </ol>"},{"location":"lectures/Installation/#basic-usage","title":"Basic Usage","text":"<ul> <li> <p>Add cell: Click <code>+ Code</code> or <code>+ Markdown</code></p> </li> <li> <p>Run cell: <code>Shift+Enter</code> | <code>Alt+Enter</code> | <code>Ctrl+Enter</code></p> </li> <li> <p>Run all cells: <code>Ctrl+Shift+P</code> \u2192 \"Run All Cells\"</p> </li> </ul>"},{"location":"lectures/Installation/#test-your-setup","title":"Test Your Setup","text":"<p>Run these commands to verify everything works:</p> <p>Test in terminal: <pre><code># Check Python\npython --version\n\n# Check Git  \ngit --version\n\n# Check Git config\ngit config --global --list\n\n# Test SSH connection to GitHub\nssh -T git@github.com\n\n# Test virtual environment\npython -m venv test_env\n# Windows: test_env\\Scripts\\activate\n# Linux/macOS: source test_env/bin/activate\n\n# Test creating .ipynb file in VS Code\n# 1. Open VS Code\n# 2. Create new file (Ctrl+N)\n# 3. Save as test.ipynb\n# 4. Select Python kernel\n# 5. Start coding!\n</code></pre></p> <p>You're ready to start coding!</p>"}]}