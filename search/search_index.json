{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Module Hi, I\u2019m Aayush, your instructor for this session. Welcome to the Kings College Python Training! I\u2019m excited to be part of your learning journey and would love to stay connected beyond this session. Whether you have questions, want to share ideas, or just expand your professional network \u2014 feel free to reach out! \ud83d\udd17 Connect with me on LinkedIn","title":"Getting Started"},{"location":"#welcome-to-python-module","text":"Hi, I\u2019m Aayush, your instructor for this session. Welcome to the Kings College Python Training! I\u2019m excited to be part of your learning journey and would love to stay connected beyond this session. Whether you have questions, want to share ideas, or just expand your professional network \u2014 feel free to reach out! \ud83d\udd17 Connect with me on LinkedIn","title":"Welcome to Python Module"},{"location":"lectures/1.Introduction/","text":"\ud83d\udcd3 Python Programming - Introduction to Python 1. What exactly is Python? Python is a high-level, interpreted, general-purpose programming language known for its simplicity and readability. It is widely used for: Web Development Data Science Machine Learning & AI Automation & Scripting Software Development Game Development Key Features: Easy to learn & use Open-source & community-driven Extensive libraries & frameworks Cross-platform Supports multiple programming paradigms (procedural, object-oriented, functional) 2. Python's Root and Ecosystem \ud83d\udc0d Origin: Created by Guido van Rossum in the late 1980s. First released in 1991 . Name inspired by the British comedy group Monty Python , not the snake. \ud83c\udf0d Ecosystem: Rich set of libraries (e.g., NumPy, Pandas, Matplotlib) Package management through pip Large developer community Popular frameworks: Django, Flask, FastAPI for web; TensorFlow, PyTorch for AI/ML 3. Python Installation & IDEs Setting Up \u2699\ufe0f Installation: - Recommended: Install latest version from https://www.python.org \ud83d\udcbb Popular IDEs for Python: Google Colab (cloud-based, no installation needed) Jupyter Notebook (ideal for data science, interactive coding) VS Code (lightweight, customizable) PyCharm (feature-rich, professional-grade) \u27a4 Example: Running Python in Google Colab 1. Visit https://colab.research.google.com Click \"New Notebook\" Write your Python code and press Shift + Enter to run # Simple Python code in Colab print(\"Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\") 4. Python Framework & Syntax Python Syntax Basics: - Case-sensitive Indentation defines blocks (no curly braces) Easy to read and write # Printing a message print(\"I thought Python was a snake... why am I coding?\") # Indentation defines code blocks x = 10 if x > 5: print(\"x is greater than 5\") # Variables and Data Types name = \"Chirag\" # String age = 25 # Integer height = 5.6 # Float is_student = True # Boolean print(f\"Name: {name}, Age: {age}, Height: {height}, Student: {is_student}\") # Comments in Python # This is a single-line comment \"\"\" This is a multi-line comment or docstring \"\"\" # Python's dynamic typing x = 10 # x is an integer x = \"hello\" # now x is a string x = [1, 2, 3] # now x is a list print(\"Dynamic typing demo:\", x) import cowsay cowsay.kitty(\"I am a kitty! not a snake!\") Let's try basic operations: Printing messages Simple arithmetic Using variables # Print statement print(\"Python: Less hiss, more code.\") # Arithmetic operations a = 5 b = 3 print(\"Sum:\", a + b) print(\"Difference:\", a - b) print(\"Product:\", a * b) print(\"Division:\", a / b) # Getting user input # name = input(\"What's your name? \") # age = input(\"How old are you? \") # print(f\"Hello {name}! You are {age} years old.\") # Note: Uncomment the above lines to try interactive input # String operations message = \"Python Programming\" print(\"Original:\", message) print(\"Uppercase:\", message.upper()) print(\"Lowercase:\", message.lower()) print(\"Length:\", len(message)) print(\"Replace:\", message.replace(\"Python\", \"Amazing Python\")) Python is simple, versatile, and powerful Created by Guido van Rossum Strong ecosystem with packages & frameworks Available in multiple IDEs (Colab, Jupyter, VS Code) Indentation is critical in Python Hands-on coding encouraged 5. The Zen of Python & Best Practices \ud83e\uddd8 Python Philosophy: Python follows the \"Zen of Python\" principles - try running import this in Python! # The Zen of Python import this \ud83d\udccb Python Naming Conventions: Variables: snake_case (e.g., user_name , total_count ) Functions: snake_case (e.g., calculate_area() , get_user_input() ) Classes: PascalCase (e.g., UserAccount , DataProcessor ) Constants: UPPER_CASE (e.g., MAX_SIZE , DEFAULT_TIMEOUT ) # Basic Error Handling try: number = int(\"not_a_number\") except ValueError as e: print(f\"Oops! That's not a valid number: {e}\") # Better approach try: user_input = \"42\" # This would normally be input() number = int(user_input) result = 100 / number print(f\"Result: {result}\") except ValueError: print(\"Please enter a valid number!\") except ZeroDivisionError: print(\"Cannot divide by zero!\") except Exception as e: print(f\"Something went wrong: {e}\") \ud83d\udcdd Practice Exercises Basic Exercises: Print your name using Python. Try basic arithmetic operations (addition, subtraction, multiplication, division). Explore Google Colab or Jupyter Notebook and run your first Python code. Intermediate Exercises: Create variables for your name, age, and favorite color, then print them in a formatted sentence. Write a program that calculates the area of a rectangle (length \u00d7 width). Try the import this command and read through the Zen of Python. Challenge Exercises: Create a simple calculator that adds two numbers (use variables, not input for now). Write a program that converts temperature from Celsius to Fahrenheit using the formula: F = (C \u00d7 9/5) + 32. Practice string operations: take a sentence and print it in uppercase, lowercase, and count its characters.","title":"Introduction to Python"},{"location":"lectures/1.Introduction/#python-programming-introduction-to-python","text":"","title":"\ud83d\udcd3 Python Programming - Introduction to Python"},{"location":"lectures/1.Introduction/#1-what-exactly-is-python","text":"Python is a high-level, interpreted, general-purpose programming language known for its simplicity and readability. It is widely used for: Web Development Data Science Machine Learning & AI Automation & Scripting Software Development Game Development Key Features: Easy to learn & use Open-source & community-driven Extensive libraries & frameworks Cross-platform Supports multiple programming paradigms (procedural, object-oriented, functional)","title":"1. What exactly is Python?"},{"location":"lectures/1.Introduction/#2-pythons-root-and-ecosystem","text":"\ud83d\udc0d Origin: Created by Guido van Rossum in the late 1980s. First released in 1991 . Name inspired by the British comedy group Monty Python , not the snake. \ud83c\udf0d Ecosystem: Rich set of libraries (e.g., NumPy, Pandas, Matplotlib) Package management through pip Large developer community Popular frameworks: Django, Flask, FastAPI for web; TensorFlow, PyTorch for AI/ML","title":"2. Python's Root and Ecosystem"},{"location":"lectures/1.Introduction/#3-python-installation-ides-setting-up","text":"\u2699\ufe0f Installation: - Recommended: Install latest version from https://www.python.org \ud83d\udcbb Popular IDEs for Python: Google Colab (cloud-based, no installation needed) Jupyter Notebook (ideal for data science, interactive coding) VS Code (lightweight, customizable) PyCharm (feature-rich, professional-grade) \u27a4 Example: Running Python in Google Colab 1. Visit https://colab.research.google.com Click \"New Notebook\" Write your Python code and press Shift + Enter to run # Simple Python code in Colab print(\"Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\")","title":"3. Python Installation &amp; IDEs Setting Up"},{"location":"lectures/1.Introduction/#4-python-framework-syntax","text":"Python Syntax Basics: - Case-sensitive Indentation defines blocks (no curly braces) Easy to read and write # Printing a message print(\"I thought Python was a snake... why am I coding?\") # Indentation defines code blocks x = 10 if x > 5: print(\"x is greater than 5\") # Variables and Data Types name = \"Chirag\" # String age = 25 # Integer height = 5.6 # Float is_student = True # Boolean print(f\"Name: {name}, Age: {age}, Height: {height}, Student: {is_student}\") # Comments in Python # This is a single-line comment \"\"\" This is a multi-line comment or docstring \"\"\" # Python's dynamic typing x = 10 # x is an integer x = \"hello\" # now x is a string x = [1, 2, 3] # now x is a list print(\"Dynamic typing demo:\", x) import cowsay cowsay.kitty(\"I am a kitty! not a snake!\") Let's try basic operations: Printing messages Simple arithmetic Using variables # Print statement print(\"Python: Less hiss, more code.\") # Arithmetic operations a = 5 b = 3 print(\"Sum:\", a + b) print(\"Difference:\", a - b) print(\"Product:\", a * b) print(\"Division:\", a / b) # Getting user input # name = input(\"What's your name? \") # age = input(\"How old are you? \") # print(f\"Hello {name}! You are {age} years old.\") # Note: Uncomment the above lines to try interactive input # String operations message = \"Python Programming\" print(\"Original:\", message) print(\"Uppercase:\", message.upper()) print(\"Lowercase:\", message.lower()) print(\"Length:\", len(message)) print(\"Replace:\", message.replace(\"Python\", \"Amazing Python\")) Python is simple, versatile, and powerful Created by Guido van Rossum Strong ecosystem with packages & frameworks Available in multiple IDEs (Colab, Jupyter, VS Code) Indentation is critical in Python Hands-on coding encouraged","title":"4. Python Framework &amp; Syntax"},{"location":"lectures/1.Introduction/#5-the-zen-of-python-best-practices","text":"\ud83e\uddd8 Python Philosophy: Python follows the \"Zen of Python\" principles - try running import this in Python! # The Zen of Python import this \ud83d\udccb Python Naming Conventions: Variables: snake_case (e.g., user_name , total_count ) Functions: snake_case (e.g., calculate_area() , get_user_input() ) Classes: PascalCase (e.g., UserAccount , DataProcessor ) Constants: UPPER_CASE (e.g., MAX_SIZE , DEFAULT_TIMEOUT ) # Basic Error Handling try: number = int(\"not_a_number\") except ValueError as e: print(f\"Oops! That's not a valid number: {e}\") # Better approach try: user_input = \"42\" # This would normally be input() number = int(user_input) result = 100 / number print(f\"Result: {result}\") except ValueError: print(\"Please enter a valid number!\") except ZeroDivisionError: print(\"Cannot divide by zero!\") except Exception as e: print(f\"Something went wrong: {e}\")","title":"5. The Zen of Python &amp; Best Practices"},{"location":"lectures/1.Introduction/#practice-exercises","text":"Basic Exercises: Print your name using Python. Try basic arithmetic operations (addition, subtraction, multiplication, division). Explore Google Colab or Jupyter Notebook and run your first Python code. Intermediate Exercises: Create variables for your name, age, and favorite color, then print them in a formatted sentence. Write a program that calculates the area of a rectangle (length \u00d7 width). Try the import this command and read through the Zen of Python. Challenge Exercises: Create a simple calculator that adds two numbers (use variables, not input for now). Write a program that converts temperature from Celsius to Fahrenheit using the formula: F = (C \u00d7 9/5) + 32. Practice string operations: take a sentence and print it in uppercase, lowercase, and count its characters.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/2.DataTypes/","text":"\ud83d\udcd3 Python Programming - Python Basics 1. Data Types & Variables What are Variables? - Variables are containers for storing data values. No need to declare the type explicitly (Python is dynamically typed). Common Data Types in Python: - str \u2192 String (text) int \u2192 Integer (whole numbers) float \u2192 Floating-point numbers (decimals) complex \u2192 Complex numbers (real + imaginary) bool \u2192 Boolean (True/False) None \u2192 Represents the absence of a value (null-like) # String name = \"Alice\" print(name,type(name)) # Integer age = 25 print(age,type(age)) # Float height = 5.7 print(height,type(height)) # Complex z = 2 + 3j print(z,type(z)) # Boolean is_student = True print(is_student,type(is_student)) # None Type data = None print(data,type(data)) Variable Naming Rules: Must start with a letter or underscore (_) Can contain letters, numbers, and underscores Case-sensitive ( name and Name are different) Cannot use Python keywords (like if , for , class ) Naming Conventions: Use descriptive names: user_age instead of a Use snake_case: first_name instead of firstName Constants in UPPER_CASE: MAX_SIZE = 100 # Valid variable names user_name = \"Alice\" age_2024 = 25 _private_var = \"hidden\" # Multiple assignment x, y, z = 1, 2, 3 print(f\"x={x}, y={y}, z={z}\") # Same value to multiple variables a = b = c = 10 print(f\"a={a}, b={b}, c={c}\") # Invalid examples (commented out to avoid errors) # 2name = \"Invalid\" # Cannot start with number # my-name = \"Invalid\" # Cannot contain hyphens # class = \"Invalid\" # Cannot use Python keywords one = 1 two = 2 three = one + two print(three) hello = \"hello\" world = \"world\" helloworld = hello + \" \" + world print(helloworld) 2. Input and Output Functions Output: print() - Used to display information to the console. Input: input() - Takes input from the user as a string. # Output print(\"Hello, World!\") # Input name = input(\"Enter your name: \") print(\"Welcome,\", name) Important Note about input(): input() always returns a string, even if the user enters a number You need to convert it to the appropriate type if needed # Input is always a string user_input = input(\"Enter a number: \") print(f\"You entered: {user_input} (type: {type(user_input)})\") # Convert to integer for calculations try: number = int(user_input) result = number * 2 print(f\"Double of your number: {result}\") except ValueError: print(\"That's not a valid number!\") # Alternative: Convert directly (but handle errors) # age = int(input(\"Enter your age: \")) # This can crash if not a number 3. Working with format() Method, f-Strings, & Escape Sequences ** String Formatting: - format() method inserts variables into strings. f-strings (Python 3.6+) provide a concise way to embed expressions inside string literals. ** Escape Sequences: - \\n \u2192 New line \\t \u2192 Tab space \\\\ \u2192 Backslash \\\" or \\' \u2192 Quotes # Using format() name = \"Vini\" age = 23 print(\"My name is {} and I am {} years old.\".format(name, age)) # Using f-strings print(f\"My name is {name} and I am {age} years old.\") # Escape sequences print(\"Hello\\tWorld\") # Tab print(\"Line 1\\nLine 2\") # New line print(\"She said, \\\"Python is fun!\\\"\") name = \"John\" print(\"Hello, %s!\" % name) mylist = [1,2,3] print(\"A list: %s\" % mylist) %s - String (or any object with a string representation, like numbers) %d - Integers %f - Floating point numbers %.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X - Integers in hex representation (lowercase/uppercase) 4. Basic Arithmetic & Operators Arithmetic Operators: - + \u2192 Addition - \u2192 Subtraction * \u2192 Multiplication / \u2192 Division // \u2192 Floor Division (discards remainder) % \u2192 Modulus (remainder) ** \u2192 Exponent (power) a = 10 b = 3 print(\"Addition:\", a + b) print(\"Subtraction:\", a - b) print(\"Multiplication:\", a * b) print(\"Division:\", a / b) print(\"Floor Division:\", a // b) print(\"Modulus:\", a % b) print(\"Exponent:\", a ** b) Comparison Operators: == \u2192 Equal to != \u2192 Not equal to > \u2192 Greater than < \u2192 Less than >= \u2192 Greater than or equal to <= \u2192 Less than or equal to Logical Operators: and \u2192 Both conditions must be True or \u2192 At least one condition must be True not \u2192 Reverses the result # Comparison operators x = 10 y = 5 print(\"Comparison Results:\") print(f\"x == y: {x == y}\") print(f\"x != y: {x != y}\") print(f\"x > y: {x > y}\") print(f\"x < y: {x < y}\") print(f\"x >= y: {x >= y}\") print(f\"x <= y: {x <= y}\") # Logical operators age = 20 has_license = True print(\"\\nLogical Operations:\") print(f\"Can drive: {age >= 18 and has_license}\") print(f\"Student or senior: {age < 25 or age > 65}\") print(f\"Not a teenager: {not (13 <= age <= 19)}\") 5. Type Casting, Type Checking, & Validation Type Casting: - Convert one data type to another using functions like int() , float() , str() , etc. Type Checking: - Use type() function to check the data type. Simple Validation Example: - Check if the input is numeric using .isdigit() . # Type Casting x = \"5\" y = int(x) # Convert string to integer print(y + 2) # Output: 7 # Type Checking print(type(y)) # Output: <class 'int'> # Validation Example user_input = input(\"Enter a number: \") if user_input.isdigit(): print(\"You entered:\", int(user_input)) else: print(\"Invalid input. Please enter a number.\") More Type Conversion Examples: # Various type conversions print(\"=== Type Conversions ===\") # String to numbers str_int = \"42\" str_float = \"3.14\" print(f\"String to int: {int(str_int)}\") print(f\"String to float: {float(str_float)}\") # Numbers to string num = 100 pi = 3.14159 print(f\"Int to string: '{str(num)}'\") print(f\"Float to string: '{str(pi)}'\") # Float to int (truncates decimal) print(f\"Float to int: {int(pi)}\") # Boolean conversions print(f\"Bool to int: {int(True)}, {int(False)}\") print(f\"Bool to string: '{str(True)}'\") # Truthy and Falsy values print(f\"bool(0): {bool(0)}\") print(f\"bool(''): {bool('')}\") print(f\"bool('hello'): {bool('hello')}\") print(f\"bool(None): {bool(None)}\") # Common conversion errors (commented to avoid crashes) # int(\"hello\") # ValueError # float(\"not_a_number\") # ValueError 6. Constants and Variable Scope Constants: Python doesn't have true constants, but convention is to use ALL_CAPS These are variables that shouldn't be changed after assignment # Constants (by convention) PI = 3.14159 MAX_USERS = 100 APP_NAME = \"My Python App\" print(f\"Pi value: {PI}\") print(f\"Maximum users: {MAX_USERS}\") print(f\"App name: {APP_NAME}\") # Using constants in calculations radius = 5 area = PI * radius ** 2 print(f\"Area of circle with radius {radius}: {area}\") # Variable scope example global_var = \"I'm global\" def demo_function(): local_var = \"I'm local\" print(f\"Inside function: {global_var}\") print(f\"Inside function: {local_var}\") demo_function() print(f\"Outside function: {global_var}\") # print(local_var) # This would cause an error - local_var not accessible Quick Recap \u2705 Python supports multiple data types (string, int, float, etc.) \u2705 Variables store data values dynamically \u2705 Use print() for output and input() for taking user input \u2705 String formatting with format() and f-strings \u2705 Arithmetic operations are straightforward \u2705 Type casting, checking, and basic input validation enhance reliability \ud83d\udcdd Practice Exercises Q. The target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20. Declare variables for your name, age, and height. Print them using f-strings. Ask the user for two numbers and print their sum. Write a program to check if the user entered a valid number. Experiment with escape sequences to format output. Use nested loops to print a pattern like: Additional Practice Exercises: Calculator Program : Create a simple calculator that takes two numbers and an operation (+, -, *, /) from the user. Temperature Converter : Write a program that converts temperature between Celsius and Fahrenheit. Data Type Explorer : Create variables of different types and use type() to display their types. Boolean Logic : Write a program that checks if a number is positive, negative, or zero using comparison operators. String Manipulation : Take a user's full name and display it in different formats (uppercase, lowercase, title case). Age Calculator : Calculate someone's age in years, months, and days given their birth year. Input Validation : Create a program that keeps asking for a number until the user provides a valid integer. * ** *** **** ***** ****** ***** **** *** ** * * *** ***** ******* ********* *********** ** Solution max = 6 print(\"=\"*15) for i in range(max): print(f'{\"*\" * (i)}') print(\"=\"*15) for i in range(max): print(f'{\"*\" * (max - i)}') print(\"=\"*15) for i in range(1,max+1): print(\" \" * (max - i) + \"*\" * (2 * i - 1)) print(\"=\"*15) Solution: # change this code mystring = \"hello\" myfloat = 10.0 myint = 20 # testing code if mystring == \"hello\": print(\"String: %s\" % mystring) if isinstance(myfloat, float) and myfloat == 10.0: print(\"Float: %f\" % myfloat) if isinstance(myint, int) and myint == 20: print(\"Integer: %d\" % myint)","title":"Data Types"},{"location":"lectures/2.DataTypes/#python-programming-python-basics","text":"","title":"\ud83d\udcd3 Python Programming - Python Basics"},{"location":"lectures/2.DataTypes/#1-data-types-variables","text":"What are Variables? - Variables are containers for storing data values. No need to declare the type explicitly (Python is dynamically typed). Common Data Types in Python: - str \u2192 String (text) int \u2192 Integer (whole numbers) float \u2192 Floating-point numbers (decimals) complex \u2192 Complex numbers (real + imaginary) bool \u2192 Boolean (True/False) None \u2192 Represents the absence of a value (null-like) # String name = \"Alice\" print(name,type(name)) # Integer age = 25 print(age,type(age)) # Float height = 5.7 print(height,type(height)) # Complex z = 2 + 3j print(z,type(z)) # Boolean is_student = True print(is_student,type(is_student)) # None Type data = None print(data,type(data)) Variable Naming Rules: Must start with a letter or underscore (_) Can contain letters, numbers, and underscores Case-sensitive ( name and Name are different) Cannot use Python keywords (like if , for , class ) Naming Conventions: Use descriptive names: user_age instead of a Use snake_case: first_name instead of firstName Constants in UPPER_CASE: MAX_SIZE = 100 # Valid variable names user_name = \"Alice\" age_2024 = 25 _private_var = \"hidden\" # Multiple assignment x, y, z = 1, 2, 3 print(f\"x={x}, y={y}, z={z}\") # Same value to multiple variables a = b = c = 10 print(f\"a={a}, b={b}, c={c}\") # Invalid examples (commented out to avoid errors) # 2name = \"Invalid\" # Cannot start with number # my-name = \"Invalid\" # Cannot contain hyphens # class = \"Invalid\" # Cannot use Python keywords one = 1 two = 2 three = one + two print(three) hello = \"hello\" world = \"world\" helloworld = hello + \" \" + world print(helloworld)","title":"1. Data Types &amp; Variables"},{"location":"lectures/2.DataTypes/#2-input-and-output-functions","text":"Output: print() - Used to display information to the console. Input: input() - Takes input from the user as a string. # Output print(\"Hello, World!\") # Input name = input(\"Enter your name: \") print(\"Welcome,\", name) Important Note about input(): input() always returns a string, even if the user enters a number You need to convert it to the appropriate type if needed # Input is always a string user_input = input(\"Enter a number: \") print(f\"You entered: {user_input} (type: {type(user_input)})\") # Convert to integer for calculations try: number = int(user_input) result = number * 2 print(f\"Double of your number: {result}\") except ValueError: print(\"That's not a valid number!\") # Alternative: Convert directly (but handle errors) # age = int(input(\"Enter your age: \")) # This can crash if not a number","title":"2. Input and Output Functions"},{"location":"lectures/2.DataTypes/#3-working-with-format-method-f-strings-escape-sequences","text":"** String Formatting: - format() method inserts variables into strings. f-strings (Python 3.6+) provide a concise way to embed expressions inside string literals. ** Escape Sequences: - \\n \u2192 New line \\t \u2192 Tab space \\\\ \u2192 Backslash \\\" or \\' \u2192 Quotes # Using format() name = \"Vini\" age = 23 print(\"My name is {} and I am {} years old.\".format(name, age)) # Using f-strings print(f\"My name is {name} and I am {age} years old.\") # Escape sequences print(\"Hello\\tWorld\") # Tab print(\"Line 1\\nLine 2\") # New line print(\"She said, \\\"Python is fun!\\\"\") name = \"John\" print(\"Hello, %s!\" % name) mylist = [1,2,3] print(\"A list: %s\" % mylist) %s - String (or any object with a string representation, like numbers) %d - Integers %f - Floating point numbers %.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X - Integers in hex representation (lowercase/uppercase)","title":"3. Working with format() Method, f-Strings, &amp; Escape Sequences"},{"location":"lectures/2.DataTypes/#4-basic-arithmetic-operators","text":"Arithmetic Operators: - + \u2192 Addition - \u2192 Subtraction * \u2192 Multiplication / \u2192 Division // \u2192 Floor Division (discards remainder) % \u2192 Modulus (remainder) ** \u2192 Exponent (power) a = 10 b = 3 print(\"Addition:\", a + b) print(\"Subtraction:\", a - b) print(\"Multiplication:\", a * b) print(\"Division:\", a / b) print(\"Floor Division:\", a // b) print(\"Modulus:\", a % b) print(\"Exponent:\", a ** b) Comparison Operators: == \u2192 Equal to != \u2192 Not equal to > \u2192 Greater than < \u2192 Less than >= \u2192 Greater than or equal to <= \u2192 Less than or equal to Logical Operators: and \u2192 Both conditions must be True or \u2192 At least one condition must be True not \u2192 Reverses the result # Comparison operators x = 10 y = 5 print(\"Comparison Results:\") print(f\"x == y: {x == y}\") print(f\"x != y: {x != y}\") print(f\"x > y: {x > y}\") print(f\"x < y: {x < y}\") print(f\"x >= y: {x >= y}\") print(f\"x <= y: {x <= y}\") # Logical operators age = 20 has_license = True print(\"\\nLogical Operations:\") print(f\"Can drive: {age >= 18 and has_license}\") print(f\"Student or senior: {age < 25 or age > 65}\") print(f\"Not a teenager: {not (13 <= age <= 19)}\")","title":"4. Basic Arithmetic &amp; Operators"},{"location":"lectures/2.DataTypes/#5-type-casting-type-checking-validation","text":"Type Casting: - Convert one data type to another using functions like int() , float() , str() , etc. Type Checking: - Use type() function to check the data type. Simple Validation Example: - Check if the input is numeric using .isdigit() . # Type Casting x = \"5\" y = int(x) # Convert string to integer print(y + 2) # Output: 7 # Type Checking print(type(y)) # Output: <class 'int'> # Validation Example user_input = input(\"Enter a number: \") if user_input.isdigit(): print(\"You entered:\", int(user_input)) else: print(\"Invalid input. Please enter a number.\") More Type Conversion Examples: # Various type conversions print(\"=== Type Conversions ===\") # String to numbers str_int = \"42\" str_float = \"3.14\" print(f\"String to int: {int(str_int)}\") print(f\"String to float: {float(str_float)}\") # Numbers to string num = 100 pi = 3.14159 print(f\"Int to string: '{str(num)}'\") print(f\"Float to string: '{str(pi)}'\") # Float to int (truncates decimal) print(f\"Float to int: {int(pi)}\") # Boolean conversions print(f\"Bool to int: {int(True)}, {int(False)}\") print(f\"Bool to string: '{str(True)}'\") # Truthy and Falsy values print(f\"bool(0): {bool(0)}\") print(f\"bool(''): {bool('')}\") print(f\"bool('hello'): {bool('hello')}\") print(f\"bool(None): {bool(None)}\") # Common conversion errors (commented to avoid crashes) # int(\"hello\") # ValueError # float(\"not_a_number\") # ValueError","title":"5. Type Casting, Type Checking, &amp; Validation"},{"location":"lectures/2.DataTypes/#6-constants-and-variable-scope","text":"Constants: Python doesn't have true constants, but convention is to use ALL_CAPS These are variables that shouldn't be changed after assignment # Constants (by convention) PI = 3.14159 MAX_USERS = 100 APP_NAME = \"My Python App\" print(f\"Pi value: {PI}\") print(f\"Maximum users: {MAX_USERS}\") print(f\"App name: {APP_NAME}\") # Using constants in calculations radius = 5 area = PI * radius ** 2 print(f\"Area of circle with radius {radius}: {area}\") # Variable scope example global_var = \"I'm global\" def demo_function(): local_var = \"I'm local\" print(f\"Inside function: {global_var}\") print(f\"Inside function: {local_var}\") demo_function() print(f\"Outside function: {global_var}\") # print(local_var) # This would cause an error - local_var not accessible Quick Recap \u2705 Python supports multiple data types (string, int, float, etc.) \u2705 Variables store data values dynamically \u2705 Use print() for output and input() for taking user input \u2705 String formatting with format() and f-strings \u2705 Arithmetic operations are straightforward \u2705 Type casting, checking, and basic input validation enhance reliability","title":"6. Constants and Variable Scope"},{"location":"lectures/2.DataTypes/#practice-exercises","text":"Q. The target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20. Declare variables for your name, age, and height. Print them using f-strings. Ask the user for two numbers and print their sum. Write a program to check if the user entered a valid number. Experiment with escape sequences to format output. Use nested loops to print a pattern like: Additional Practice Exercises: Calculator Program : Create a simple calculator that takes two numbers and an operation (+, -, *, /) from the user. Temperature Converter : Write a program that converts temperature between Celsius and Fahrenheit. Data Type Explorer : Create variables of different types and use type() to display their types. Boolean Logic : Write a program that checks if a number is positive, negative, or zero using comparison operators. String Manipulation : Take a user's full name and display it in different formats (uppercase, lowercase, title case). Age Calculator : Calculate someone's age in years, months, and days given their birth year. Input Validation : Create a program that keeps asking for a number until the user provides a valid integer. * ** *** **** ***** ****** ***** **** *** ** * * *** ***** ******* ********* *********** ** Solution max = 6 print(\"=\"*15) for i in range(max): print(f'{\"*\" * (i)}') print(\"=\"*15) for i in range(max): print(f'{\"*\" * (max - i)}') print(\"=\"*15) for i in range(1,max+1): print(\" \" * (max - i) + \"*\" * (2 * i - 1)) print(\"=\"*15) Solution: # change this code mystring = \"hello\" myfloat = 10.0 myint = 20 # testing code if mystring == \"hello\": print(\"String: %s\" % mystring) if isinstance(myfloat, float) and myfloat == 10.0: print(\"Float: %f\" % myfloat) if isinstance(myint, int) and myint == 20: print(\"Integer: %d\" % myint)","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/3.ControlStructures/","text":"\ud83d\udcd3 Python Programming - Control Structures 1. Conditional Statements Conditional Statements in Python: - Used to make decisions based on conditions. Keywords: if , elif , else . # Simple if-else age = 20 if age >= 18: print(\"You are eligible to vote.\") else: print(\"You are not eligible to vote.\") # if-elif-else marks = 85 if marks >= 90: print(\"Grade: A+\") elif marks >= 75: print(\"Grade: A\") elif marks >= 60: print(\"Grade: B\") else: print(\"Grade: C\") Nested Conditionals & Ternary Operator: # Nested conditionals age = 25 has_license = True if age >= 18: if has_license: print(\"You can drive!\") else: print(\"You need a license to drive.\") else: print(\"You're too young to drive.\") # Ternary operator (conditional expression) result = \"Pass\" if marks >= 60 else \"Fail\" print(f\"Result: {result}\") # Multiple conditions with logical operators temperature = 25 weather = \"sunny\" if temperature > 20 and weather == \"sunny\": print(\"Perfect weather for outdoor activities!\") elif temperature > 20 or weather == \"cloudy\": print(\"Good weather for a walk.\") else: print(\"Stay indoors!\") 2. Loops Python supports two main types of loops: 1. for loop \u2192 Iterate over sequences (strings, lists, tuples, etc.) while loop \u2192 Repeats while a condition is True \u27a4 For Loop Example: # Loop over a range of numbers - For loop example for i in range(5): print(i) Understanding range() and enumerate(): # Different ways to use range() print(\"range(5):\") for i in range(5): print(i, end=\" \") print() print(\"range(2, 8):\") for i in range(2, 8): print(i, end=\" \") print() print(\"range(0, 10, 2):\") for i in range(0, 10, 2): print(i, end=\" \") print() print(\"range(10, 0, -2):\") for i in range(10, 0, -2): print(i, end=\" \") print() # Using enumerate() to get index and value fruits = [\"apple\", \"banana\", \"cherry\", \"date\"] print(\"\\nUsing enumerate():\") for index, fruit in enumerate(fruits): print(f\"{index}: {fruit}\") # Starting enumerate from a different number print(\"\\nEnumerate starting from 1:\") for index, fruit in enumerate(fruits, 1): print(f\"{index}. {fruit}\") # Loop over a list - For loop example fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits: print(fruit) \u27a4 While Loop Example: # Print numbers 1 to 5 using while loop count = 1 while count <= 5: print(count) count += 1 While/Else Loop & Infinite Loop Prevention: # While-else loop count = 1 while count <= 3: print(f\"Count: {count}\") count += 1 else: print(\"Loop completed successfully!\") # Infinite loop prevention with safety counter safety_counter = 0 MAX_ITERATIONS = 1000 while True: safety_counter += 1 # Your loop logic here if safety_counter >= MAX_ITERATIONS: print(\"Safety break: Maximum iterations reached\") break # Simulating some condition that would normally break the loop if safety_counter >= 5: print(\"Normal break condition met\") break print(f\"Iteration {safety_counter}\") # Common infinite loop mistake (commented to prevent actual infinite loop) # x = 10 # while x > 0: # print(x) # # Forgot to decrement x - this would run forever! # Print even numbers from 1 to 10 using while loop count = 1 while count <= 10: if count % 2 == 0: print(count) count += 1 3. Looping Over Tuples, Strings, & Dictionaries # Tuple colors = (\"red\", \"green\", \"blue\") for color in colors: print(color) # String for char in \"Python\": print(char) # Dictionary student = {\"name\": \"Alice\", \"age\": 21} for key, value in student.items(): print(f\"{key}: {value}\") Advanced Looping Techniques: # Using zip() to iterate over multiple sequences names = [\"Alice\", \"Bob\", \"Charlie\"] ages = [25, 30, 35] cities = [\"New York\", \"London\", \"Tokyo\"] print(\"Using zip():\") for name, age, city in zip(names, ages, cities): print(f\"{name} is {age} years old and lives in {city}\") # Using reversed() to iterate backwards print(\"\\nUsing reversed():\") for fruit in reversed([\"apple\", \"banana\", \"cherry\"]): print(fruit) # List comprehensions (brief introduction) print(\"\\nList comprehensions:\") numbers = [1, 2, 3, 4, 5] squares = [x**2 for x in numbers] print(f\"Squares: {squares}\") even_squares = [x**2 for x in numbers if x % 2 == 0] print(f\"Even squares: {even_squares}\") # Nested list comprehension matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] flat_list = [item for row in matrix for item in row] print(f\"Flattened matrix: {flat_list}\") 4. Special Loops: for/else The else block after a for loop executes if the loop completes normally (no break ). # Check if a number is prime num = 7 for i in range(2, num): if num % i == 0: print(f\"{num} is not prime.\") break else: print(f\"{num} is prime.\") 5. Nested Loops and Flow Control # Nested loop for multiplication table for i in range(1, 4): for j in range(1, 4): print(f\"{i} x {j} = {i * j}\") print(\"---\") 6. Special Statements: pass, continue, break # pass - placeholder for i in range(3): pass # Does nothing, placeholder for future code print(\"=\" * 5) # continue - skip current iteration for i in range(5): if i == 2: continue print(i) print(\"=\" * 5) # break - exit loop for i in range(5): if i == 3: break print(i) print(\"=\" * 5) Error Handling in Loops: # Handling errors in loops numbers = [\"1\", \"2\", \"three\", \"4\", \"5\"] print(\"Processing numbers with error handling:\") for num_str in numbers: try: num = int(num_str) print(f\"Number: {num}, Square: {num**2}\") except ValueError: print(f\"'{num_str}' is not a valid number, skipping...\") # Using flags to control loop behavior print(\"\\nUsing flags:\") found = False target = 3 numbers = [1, 2, 3, 4, 5] for num in numbers: if num == target: print(f\"Found {target}!\") found = True break if not found: print(f\"{target} not found in the list\") # Breaking out of nested loops using functions def find_in_matrix(matrix, target): for i, row in enumerate(matrix): for j, value in enumerate(row): if value == target: return i, j return None matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] result = find_in_matrix(matrix, 5) if result: print(f\"Found at position: {result}\") else: print(\"Not found\") 7. Resolving Real-World Problems Let's solve a simple real-world problem using control structures. # Simple password validation correct_password = \"python123\" attempts = 3 while attempts > 0: pwd = input(\"Enter password: \") if pwd == correct_password: print(\"Access granted!\") break else: print(\"Incorrect password. Try again.\") attempts -= 1 if attempts == 0: print(\"Access denied. Too many failed attempts.\") 8. Match/Case Statement (Python 3.10+) The match/case statement is Python's version of switch-case from other languages. # Basic match/case example day = \"Monday\" match day: case \"Monday\": print(\"Start of the work week!\") case \"Tuesday\" | \"Wednesday\" | \"Thursday\": print(\"Midweek days\") case \"Friday\": print(\"TGIF!\") case \"Saturday\" | \"Sunday\": print(\"Weekend!\") case _: print(\"Invalid day\") # Match with conditions score = 85 match score: case x if x >= 90: grade = \"A\" case x if x >= 80: grade = \"B\" case x if x >= 70: grade = \"C\" case x if x >= 60: grade = \"D\" case _: grade = \"F\" print(f\"Score: {score}, Grade: {grade}\") # Match with data structures def process_data(data): match data: case {\"type\": \"user\", \"name\": str(name)}: return f\"Hello, {name}!\" case {\"type\": \"product\", \"name\": str(name), \"price\": float(price)}: return f\"Product: {name}, Price: ${price}\" case list() if len(data) > 0: return f\"List with {len(data)} items\" case _: return \"Unknown data format\" # Test the function print(process_data({\"type\": \"user\", \"name\": \"Alice\"})) print(process_data({\"type\": \"product\", \"name\": \"Laptop\", \"price\": 999.99})) print(process_data([1, 2, 3, 4, 5])) \ud83d\udee0\ufe0f AI Tool: Google Colab - Gemini Or Github Copilot You can explore AI tools like Gemini inside Google Colab to assist with understanding Python code, generating examples, or debugging. Example: - Use Google Colab's built-in chat assistant for hints or suggestions. Explore AI code completion to speed up your coding. Alternative: Github Copilot \ud83c\udfaf Quick Recap Use if , elif , else for decision-making for and while loops help with repetition Loop over sequences like tuples, strings, dictionaries Special loop structures: for/else Use pass , continue , break for flow control Practice solving real-world problems \ud83d\udcdd Practice Exercises Basic Exercises: Write a program that checks whether a number is positive, negative, or zero. Print all even numbers from 1 to 20 using a for loop. Create a simple calculator using if-elif-else . Write a program to validate password input with a maximum of 3 attempts. Intermediate Exercises: Create a number guessing game where the computer picks a random number and the user has to guess it. Write a program that prints the multiplication table for any given number. Use nested loops to print patterns like triangles and diamonds. Create a menu-driven program using match/case (if available) or if-elif-else. Advanced Exercises: Write a program that finds all prime numbers up to a given number using nested loops. Create a simple ATM system with balance checking, withdrawal, and deposit features. Build a word frequency counter that counts how many times each word appears in a sentence. Write a program that validates user input and keeps asking until valid data is entered. Challenge Exercises: Create a simple text-based adventure game using control structures. Build a grade management system that can add, remove, and calculate average grades. Write a program that simulates a simple voting system with candidate validation. Create a loan eligibility checker based on multiple criteria (age, income, credit score).","title":"Control Structures"},{"location":"lectures/3.ControlStructures/#python-programming-control-structures","text":"","title":"\ud83d\udcd3 Python Programming - Control Structures"},{"location":"lectures/3.ControlStructures/#1-conditional-statements","text":"Conditional Statements in Python: - Used to make decisions based on conditions. Keywords: if , elif , else . # Simple if-else age = 20 if age >= 18: print(\"You are eligible to vote.\") else: print(\"You are not eligible to vote.\") # if-elif-else marks = 85 if marks >= 90: print(\"Grade: A+\") elif marks >= 75: print(\"Grade: A\") elif marks >= 60: print(\"Grade: B\") else: print(\"Grade: C\") Nested Conditionals & Ternary Operator: # Nested conditionals age = 25 has_license = True if age >= 18: if has_license: print(\"You can drive!\") else: print(\"You need a license to drive.\") else: print(\"You're too young to drive.\") # Ternary operator (conditional expression) result = \"Pass\" if marks >= 60 else \"Fail\" print(f\"Result: {result}\") # Multiple conditions with logical operators temperature = 25 weather = \"sunny\" if temperature > 20 and weather == \"sunny\": print(\"Perfect weather for outdoor activities!\") elif temperature > 20 or weather == \"cloudy\": print(\"Good weather for a walk.\") else: print(\"Stay indoors!\")","title":"1. Conditional Statements"},{"location":"lectures/3.ControlStructures/#2-loops","text":"Python supports two main types of loops: 1. for loop \u2192 Iterate over sequences (strings, lists, tuples, etc.) while loop \u2192 Repeats while a condition is True \u27a4 For Loop Example: # Loop over a range of numbers - For loop example for i in range(5): print(i) Understanding range() and enumerate(): # Different ways to use range() print(\"range(5):\") for i in range(5): print(i, end=\" \") print() print(\"range(2, 8):\") for i in range(2, 8): print(i, end=\" \") print() print(\"range(0, 10, 2):\") for i in range(0, 10, 2): print(i, end=\" \") print() print(\"range(10, 0, -2):\") for i in range(10, 0, -2): print(i, end=\" \") print() # Using enumerate() to get index and value fruits = [\"apple\", \"banana\", \"cherry\", \"date\"] print(\"\\nUsing enumerate():\") for index, fruit in enumerate(fruits): print(f\"{index}: {fruit}\") # Starting enumerate from a different number print(\"\\nEnumerate starting from 1:\") for index, fruit in enumerate(fruits, 1): print(f\"{index}. {fruit}\") # Loop over a list - For loop example fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits: print(fruit) \u27a4 While Loop Example: # Print numbers 1 to 5 using while loop count = 1 while count <= 5: print(count) count += 1 While/Else Loop & Infinite Loop Prevention: # While-else loop count = 1 while count <= 3: print(f\"Count: {count}\") count += 1 else: print(\"Loop completed successfully!\") # Infinite loop prevention with safety counter safety_counter = 0 MAX_ITERATIONS = 1000 while True: safety_counter += 1 # Your loop logic here if safety_counter >= MAX_ITERATIONS: print(\"Safety break: Maximum iterations reached\") break # Simulating some condition that would normally break the loop if safety_counter >= 5: print(\"Normal break condition met\") break print(f\"Iteration {safety_counter}\") # Common infinite loop mistake (commented to prevent actual infinite loop) # x = 10 # while x > 0: # print(x) # # Forgot to decrement x - this would run forever! # Print even numbers from 1 to 10 using while loop count = 1 while count <= 10: if count % 2 == 0: print(count) count += 1","title":"2. Loops"},{"location":"lectures/3.ControlStructures/#3-looping-over-tuples-strings-dictionaries","text":"# Tuple colors = (\"red\", \"green\", \"blue\") for color in colors: print(color) # String for char in \"Python\": print(char) # Dictionary student = {\"name\": \"Alice\", \"age\": 21} for key, value in student.items(): print(f\"{key}: {value}\") Advanced Looping Techniques: # Using zip() to iterate over multiple sequences names = [\"Alice\", \"Bob\", \"Charlie\"] ages = [25, 30, 35] cities = [\"New York\", \"London\", \"Tokyo\"] print(\"Using zip():\") for name, age, city in zip(names, ages, cities): print(f\"{name} is {age} years old and lives in {city}\") # Using reversed() to iterate backwards print(\"\\nUsing reversed():\") for fruit in reversed([\"apple\", \"banana\", \"cherry\"]): print(fruit) # List comprehensions (brief introduction) print(\"\\nList comprehensions:\") numbers = [1, 2, 3, 4, 5] squares = [x**2 for x in numbers] print(f\"Squares: {squares}\") even_squares = [x**2 for x in numbers if x % 2 == 0] print(f\"Even squares: {even_squares}\") # Nested list comprehension matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] flat_list = [item for row in matrix for item in row] print(f\"Flattened matrix: {flat_list}\")","title":"3. Looping Over Tuples, Strings, &amp; Dictionaries"},{"location":"lectures/3.ControlStructures/#4-special-loops-forelse","text":"","title":"4. Special Loops: for/else"},{"location":"lectures/3.ControlStructures/#the-else-block-after-a-for-loop-executes-if-the-loop-completes-normally-no-break","text":"# Check if a number is prime num = 7 for i in range(2, num): if num % i == 0: print(f\"{num} is not prime.\") break else: print(f\"{num} is prime.\")","title":"The else block after a for loop executes if the loop completes normally (no break)."},{"location":"lectures/3.ControlStructures/#5-nested-loops-and-flow-control","text":"# Nested loop for multiplication table for i in range(1, 4): for j in range(1, 4): print(f\"{i} x {j} = {i * j}\") print(\"---\")","title":"5. Nested Loops and Flow Control"},{"location":"lectures/3.ControlStructures/#6-special-statements-pass-continue-break","text":"# pass - placeholder for i in range(3): pass # Does nothing, placeholder for future code print(\"=\" * 5) # continue - skip current iteration for i in range(5): if i == 2: continue print(i) print(\"=\" * 5) # break - exit loop for i in range(5): if i == 3: break print(i) print(\"=\" * 5) Error Handling in Loops: # Handling errors in loops numbers = [\"1\", \"2\", \"three\", \"4\", \"5\"] print(\"Processing numbers with error handling:\") for num_str in numbers: try: num = int(num_str) print(f\"Number: {num}, Square: {num**2}\") except ValueError: print(f\"'{num_str}' is not a valid number, skipping...\") # Using flags to control loop behavior print(\"\\nUsing flags:\") found = False target = 3 numbers = [1, 2, 3, 4, 5] for num in numbers: if num == target: print(f\"Found {target}!\") found = True break if not found: print(f\"{target} not found in the list\") # Breaking out of nested loops using functions def find_in_matrix(matrix, target): for i, row in enumerate(matrix): for j, value in enumerate(row): if value == target: return i, j return None matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] result = find_in_matrix(matrix, 5) if result: print(f\"Found at position: {result}\") else: print(\"Not found\")","title":"6. Special Statements: pass, continue, break"},{"location":"lectures/3.ControlStructures/#7-resolving-real-world-problems","text":"Let's solve a simple real-world problem using control structures. # Simple password validation correct_password = \"python123\" attempts = 3 while attempts > 0: pwd = input(\"Enter password: \") if pwd == correct_password: print(\"Access granted!\") break else: print(\"Incorrect password. Try again.\") attempts -= 1 if attempts == 0: print(\"Access denied. Too many failed attempts.\")","title":"7. Resolving Real-World Problems"},{"location":"lectures/3.ControlStructures/#8-matchcase-statement-python-310","text":"The match/case statement is Python's version of switch-case from other languages. # Basic match/case example day = \"Monday\" match day: case \"Monday\": print(\"Start of the work week!\") case \"Tuesday\" | \"Wednesday\" | \"Thursday\": print(\"Midweek days\") case \"Friday\": print(\"TGIF!\") case \"Saturday\" | \"Sunday\": print(\"Weekend!\") case _: print(\"Invalid day\") # Match with conditions score = 85 match score: case x if x >= 90: grade = \"A\" case x if x >= 80: grade = \"B\" case x if x >= 70: grade = \"C\" case x if x >= 60: grade = \"D\" case _: grade = \"F\" print(f\"Score: {score}, Grade: {grade}\") # Match with data structures def process_data(data): match data: case {\"type\": \"user\", \"name\": str(name)}: return f\"Hello, {name}!\" case {\"type\": \"product\", \"name\": str(name), \"price\": float(price)}: return f\"Product: {name}, Price: ${price}\" case list() if len(data) > 0: return f\"List with {len(data)} items\" case _: return \"Unknown data format\" # Test the function print(process_data({\"type\": \"user\", \"name\": \"Alice\"})) print(process_data({\"type\": \"product\", \"name\": \"Laptop\", \"price\": 999.99})) print(process_data([1, 2, 3, 4, 5])) \ud83d\udee0\ufe0f AI Tool: Google Colab - Gemini Or Github Copilot You can explore AI tools like Gemini inside Google Colab to assist with understanding Python code, generating examples, or debugging. Example: - Use Google Colab's built-in chat assistant for hints or suggestions. Explore AI code completion to speed up your coding. Alternative: Github Copilot \ud83c\udfaf Quick Recap Use if , elif , else for decision-making for and while loops help with repetition Loop over sequences like tuples, strings, dictionaries Special loop structures: for/else Use pass , continue , break for flow control Practice solving real-world problems","title":"8. Match/Case Statement (Python 3.10+)"},{"location":"lectures/3.ControlStructures/#practice-exercises","text":"Basic Exercises: Write a program that checks whether a number is positive, negative, or zero. Print all even numbers from 1 to 20 using a for loop. Create a simple calculator using if-elif-else . Write a program to validate password input with a maximum of 3 attempts. Intermediate Exercises: Create a number guessing game where the computer picks a random number and the user has to guess it. Write a program that prints the multiplication table for any given number. Use nested loops to print patterns like triangles and diamonds. Create a menu-driven program using match/case (if available) or if-elif-else. Advanced Exercises: Write a program that finds all prime numbers up to a given number using nested loops. Create a simple ATM system with balance checking, withdrawal, and deposit features. Build a word frequency counter that counts how many times each word appears in a sentence. Write a program that validates user input and keeps asking until valid data is entered. Challenge Exercises: Create a simple text-based adventure game using control structures. Build a grade management system that can add, remove, and calculate average grades. Write a program that simulates a simple voting system with candidate validation. Create a loan eligibility checker based on multiple criteria (age, income, credit score).","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/4.DataStructures/","text":"\ud83d\udcd3 Python Programming - Data Structures \ud83d\udfe2 1. Lists Lists in Python: - Ordered, mutable (can be changed) collection of items. Can store mixed data types. # Creating a list fruits = [\"apple\", \"banana\", \"cherry\"] print(fruits) \u27a4 Indexing, Slicing & Negative Indexing: # Indexing print(fruits[0]) # First item print(fruits[-1]) # Last item # Slicing print(fruits[0:2]) # First two items \u27a4 Looping Through Lists & Conditions: for fruit in fruits: if fruit.startswith(\"b\"): print(f\"{fruit} starts with 'b'\") \u27a4 Useful List Methods: # Adding items fruits.append(\"orange\") print(fruits) fruits.insert(1, \"mango\") print(fruits) # Removing items fruits.remove(\"banana\") print(fruits) # Sorting fruits.sort() print(fruits) \u27a4 List Comprehension with Conditions: # Create list of squares for even numbers from 0 to 10 squares = [x**2 for x in range(11) if x % 2 == 0] print(squares) \ud83d\udfe2 2. Tuples Tuples: - Ordered, immutable collection. Faster than lists. Suitable for fixed data. # Creating a tuple dimensions = (10, 20, 30) print(dimensions) # Indexing and Slicing print(dimensions[1]) print(dimensions[:2]) # Looping for dim in dimensions: print(dim) \u27a4 List vs Tuple: List: Mutable \u2192 You can modify contents. Tuple: Immutable \u2192 Contents cannot be changed. Lists have more built-in methods compared to tuples. Use lists for homogeneous items and tuples for heterogeneous items. \u27a4 Switching Between Lists and Tuples: # List to Tuple my_list = [1, 2, 3] my_tuple = tuple(my_list) print(my_tuple) # Tuple to List new_list = list(my_tuple) print(new_list) \u27a4 Tuple Unpacking: person = (\"Alice\", 25, \"Engineer\") name, age, profession = person print(name, age, profession) \ud83d\udfe2 3. Sets Sets: - Unordered collection of unique items. Used for mathematical operations like union, intersection, etc. \u27a4 Basic Set Operations: # Creating sets colors = {\"red\", \"green\", \"blue\"} print(colors) # Adding, Removing, Discarding colors.add(\"yellow\") print(colors) colors.remove(\"green\") # Raises error if not present print(colors) colors.discard(\"purple\") # No error if not present print(colors) \u27a4 Set Operations: a = {1, 2, 3, 4} b = {3, 4, 5, 6} print(\"Union:\", a | b) print(\"Intersection:\", a & b) print(\"Difference:\", a - b) \u27a4 Frozenset vs Set: set \u2192 Mutable frozenset \u2192 Immutable fs = frozenset([1, 2, 3]) print(fs) \ud83d\udfe2 4. Dictionaries Dictionaries: - Collection of key-value pairs. Keys must be unique. \u27a4 Creating & Accessing: student = {\"name\": \"Alice\", \"age\": 22, \"grade\": \"A\"} print(student[\"name\"]) \u27a4 Useful Dictionary Methods: # Get with default print(student.get(\"age\")) print(student.get(\"major\", \"Not specified\")) # Update student.update({\"grade\": \"A+\", \"major\": \"CS\"}) print(student) # Keys, Values print(student.keys()) print(student.values()) # Pop student.pop(\"age\") print(student) \u27a4 Dictionary Comprehension: # Squares of numbers squares = {x: x**2 for x in range(5)} print(squares) # Filtering even squares even_squares = {k: v for k, v in squares.items() if v % 2 == 0} print(even_squares) \u27a4 Nested Dictionaries: # Student with nested details student = { \"name\": \"Alice\", \"subjects\": {\"Math\": 90, \"Science\": 95} } print(student[\"subjects\"][\"Math\"]) \ud83c\udfaf Quick Recap \u2705 Lists \u2192 Ordered, mutable \u2705 Tuples \u2192 Ordered, immutable \u2705 Sets \u2192 Unordered, unique items \u2705 Dictionaries \u2192 Key-value pairs \u2705 Use list/dictionary comprehension for concise code \ud83d\udcdd Practice Exercises Create a list of your favorite 5 movies and sort them. Convert a list of numbers to a tuple and unpack the first three numbers. Find common elements between two sets. Create a dictionary for a book with title, author, and year. Add a genre to it. Use dictionary comprehension to map numbers from 1 to 5 to their cubes.","title":"4.DataStructures"},{"location":"lectures/4.DataStructures/#python-programming-data-structures","text":"","title":"\ud83d\udcd3 Python Programming - Data Structures"},{"location":"lectures/4.DataStructures/#1-lists","text":"Lists in Python: - Ordered, mutable (can be changed) collection of items. Can store mixed data types. # Creating a list fruits = [\"apple\", \"banana\", \"cherry\"] print(fruits) \u27a4 Indexing, Slicing & Negative Indexing: # Indexing print(fruits[0]) # First item print(fruits[-1]) # Last item # Slicing print(fruits[0:2]) # First two items \u27a4 Looping Through Lists & Conditions: for fruit in fruits: if fruit.startswith(\"b\"): print(f\"{fruit} starts with 'b'\") \u27a4 Useful List Methods: # Adding items fruits.append(\"orange\") print(fruits) fruits.insert(1, \"mango\") print(fruits) # Removing items fruits.remove(\"banana\") print(fruits) # Sorting fruits.sort() print(fruits) \u27a4 List Comprehension with Conditions: # Create list of squares for even numbers from 0 to 10 squares = [x**2 for x in range(11) if x % 2 == 0] print(squares)","title":"\ud83d\udfe2 1. Lists"},{"location":"lectures/4.DataStructures/#2-tuples","text":"Tuples: - Ordered, immutable collection. Faster than lists. Suitable for fixed data. # Creating a tuple dimensions = (10, 20, 30) print(dimensions) # Indexing and Slicing print(dimensions[1]) print(dimensions[:2]) # Looping for dim in dimensions: print(dim) \u27a4 List vs Tuple: List: Mutable \u2192 You can modify contents. Tuple: Immutable \u2192 Contents cannot be changed. Lists have more built-in methods compared to tuples. Use lists for homogeneous items and tuples for heterogeneous items. \u27a4 Switching Between Lists and Tuples: # List to Tuple my_list = [1, 2, 3] my_tuple = tuple(my_list) print(my_tuple) # Tuple to List new_list = list(my_tuple) print(new_list) \u27a4 Tuple Unpacking: person = (\"Alice\", 25, \"Engineer\") name, age, profession = person print(name, age, profession)","title":"\ud83d\udfe2 2. Tuples"},{"location":"lectures/4.DataStructures/#3-sets","text":"Sets: - Unordered collection of unique items. Used for mathematical operations like union, intersection, etc. \u27a4 Basic Set Operations: # Creating sets colors = {\"red\", \"green\", \"blue\"} print(colors) # Adding, Removing, Discarding colors.add(\"yellow\") print(colors) colors.remove(\"green\") # Raises error if not present print(colors) colors.discard(\"purple\") # No error if not present print(colors) \u27a4 Set Operations: a = {1, 2, 3, 4} b = {3, 4, 5, 6} print(\"Union:\", a | b) print(\"Intersection:\", a & b) print(\"Difference:\", a - b) \u27a4 Frozenset vs Set: set \u2192 Mutable frozenset \u2192 Immutable fs = frozenset([1, 2, 3]) print(fs)","title":"\ud83d\udfe2 3. Sets"},{"location":"lectures/4.DataStructures/#4-dictionaries","text":"Dictionaries: - Collection of key-value pairs. Keys must be unique. \u27a4 Creating & Accessing: student = {\"name\": \"Alice\", \"age\": 22, \"grade\": \"A\"} print(student[\"name\"]) \u27a4 Useful Dictionary Methods: # Get with default print(student.get(\"age\")) print(student.get(\"major\", \"Not specified\")) # Update student.update({\"grade\": \"A+\", \"major\": \"CS\"}) print(student) # Keys, Values print(student.keys()) print(student.values()) # Pop student.pop(\"age\") print(student) \u27a4 Dictionary Comprehension: # Squares of numbers squares = {x: x**2 for x in range(5)} print(squares) # Filtering even squares even_squares = {k: v for k, v in squares.items() if v % 2 == 0} print(even_squares) \u27a4 Nested Dictionaries: # Student with nested details student = { \"name\": \"Alice\", \"subjects\": {\"Math\": 90, \"Science\": 95} } print(student[\"subjects\"][\"Math\"])","title":"\ud83d\udfe2 4. Dictionaries"},{"location":"lectures/4.DataStructures/#quick-recap","text":"\u2705 Lists \u2192 Ordered, mutable \u2705 Tuples \u2192 Ordered, immutable \u2705 Sets \u2192 Unordered, unique items \u2705 Dictionaries \u2192 Key-value pairs \u2705 Use list/dictionary comprehension for concise code","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/4.DataStructures/#practice-exercises","text":"Create a list of your favorite 5 movies and sort them. Convert a list of numbers to a tuple and unpack the first three numbers. Find common elements between two sets. Create a dictionary for a book with title, author, and year. Add a genre to it. Use dictionary comprehension to map numbers from 1 to 5 to their cubes.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/5.Functions/","text":"\ud83d\udcd3 Python Programming - Functions \ud83d\udfe2 1. Defining Functions with def Keyword Functions allow us to group reusable pieces of code. Syntax: def function_name(parameters): # code block return value \u27a4 Example: # Simple function def greet(): print(\"Hello, welcome to Python class!\") greet() \ud83d\udfe2 2. Parameters, Arguments & Return Statements Parameter: The variable listed inside parentheses in function definition. Argument: The value passed to the function. return sends a result back to the caller. def add(a, b): return a + b result = add(5, 3) print(\"Sum:\", result) \ud83d\udfe2 3. Returning Multiple Values You can return multiple values as a tuple. def calculate(x, y): sum_ = x + y diff = x - y multiply = x * y return sum_, diff, multiply s, d, m = calculate(10, 4) print(\"Sum:\", s) print(\"Difference:\", d) print(\"Multiplication:\", m) \ud83d\udfe2 4. Default & Keyword Arguments Default arguments: Provide default values if no argument is passed. Keyword arguments: Specify arguments by name during function call. # Default argument def greet(name=\"Guest\"): print(f\"Hello, {name}!\") greet() greet(\"Alice\") # Keyword argument def student(name, age): print(f\"Name: {name}, Age: {age}\") student(age=21, name=\"Bob\") \ud83d\udfe2 5. Anonymous Functions (lambda) lambda functions are small, one-line anonymous functions. # Lambda function for square square = lambda x: x ** 2 print(square(5)) # Lambda with multiple arguments add = lambda a, b: a + b print(add(3, 4)) \ud83d\udfe2 6. Nested Functions & Closures You can define functions inside other functions. Closure: Inner function remembers variables from the outer function. def outer(): msg = \"Python is fun!\" def inner(): print(msg) return inner my_func = outer() my_func() \ud83d\udfe2 7. Scopes in Python: Local & Global Local Scope: Variables defined inside a function. Global Scope: Variables defined outside all functions. \u27a4 Example: x = 10 # Global variable def show(): x = 5 # Local variable print(\"Inside function:\", x) show() print(\"Outside function:\", x) \u27a4 Global Keyword Example: x = 10 def modify(): global x x = 20 modify() print(\"After modification:\", x) \ud83c\udfaf Quick Recap \u2705 Functions are reusable code blocks. \u2705 Can return multiple values. \u2705 Default and keyword arguments improve flexibility. \u2705 Lambda functions create simple anonymous functions. \u2705 Nested functions & closures allow for advanced design. \u2705 Understand local vs global scope. \ud83d\udcdd Practice Exercises Write a function to find the maximum of two numbers. Create a lambda function to calculate the cube of a number. Write a function that returns the sum, product, and difference of two numbers. Use a default argument to greet a user if no name is provided. Demonstrate variable scope by defining a global variable and modifying it inside a function.","title":"5.Functions"},{"location":"lectures/5.Functions/#python-programming-functions","text":"","title":"\ud83d\udcd3 Python Programming - Functions"},{"location":"lectures/5.Functions/#1-defining-functions-with-def-keyword","text":"Functions allow us to group reusable pieces of code. Syntax: def function_name(parameters): # code block return value \u27a4 Example: # Simple function def greet(): print(\"Hello, welcome to Python class!\") greet()","title":"\ud83d\udfe2 1. Defining Functions with def Keyword"},{"location":"lectures/5.Functions/#2-parameters-arguments-return-statements","text":"Parameter: The variable listed inside parentheses in function definition. Argument: The value passed to the function. return sends a result back to the caller. def add(a, b): return a + b result = add(5, 3) print(\"Sum:\", result)","title":"\ud83d\udfe2 2. Parameters, Arguments &amp; Return Statements"},{"location":"lectures/5.Functions/#3-returning-multiple-values","text":"You can return multiple values as a tuple. def calculate(x, y): sum_ = x + y diff = x - y multiply = x * y return sum_, diff, multiply s, d, m = calculate(10, 4) print(\"Sum:\", s) print(\"Difference:\", d) print(\"Multiplication:\", m)","title":"\ud83d\udfe2 3. Returning Multiple Values"},{"location":"lectures/5.Functions/#4-default-keyword-arguments","text":"Default arguments: Provide default values if no argument is passed. Keyword arguments: Specify arguments by name during function call. # Default argument def greet(name=\"Guest\"): print(f\"Hello, {name}!\") greet() greet(\"Alice\") # Keyword argument def student(name, age): print(f\"Name: {name}, Age: {age}\") student(age=21, name=\"Bob\")","title":"\ud83d\udfe2 4. Default &amp; Keyword Arguments"},{"location":"lectures/5.Functions/#5-anonymous-functions-lambda","text":"lambda functions are small, one-line anonymous functions. # Lambda function for square square = lambda x: x ** 2 print(square(5)) # Lambda with multiple arguments add = lambda a, b: a + b print(add(3, 4))","title":"\ud83d\udfe2 5. Anonymous Functions (lambda)"},{"location":"lectures/5.Functions/#6-nested-functions-closures","text":"You can define functions inside other functions. Closure: Inner function remembers variables from the outer function. def outer(): msg = \"Python is fun!\" def inner(): print(msg) return inner my_func = outer() my_func()","title":"\ud83d\udfe2 6. Nested Functions &amp; Closures"},{"location":"lectures/5.Functions/#7-scopes-in-python-local-global","text":"Local Scope: Variables defined inside a function. Global Scope: Variables defined outside all functions. \u27a4 Example: x = 10 # Global variable def show(): x = 5 # Local variable print(\"Inside function:\", x) show() print(\"Outside function:\", x) \u27a4 Global Keyword Example: x = 10 def modify(): global x x = 20 modify() print(\"After modification:\", x)","title":"\ud83d\udfe2 7. Scopes in Python: Local &amp; Global"},{"location":"lectures/5.Functions/#quick-recap","text":"\u2705 Functions are reusable code blocks. \u2705 Can return multiple values. \u2705 Default and keyword arguments improve flexibility. \u2705 Lambda functions create simple anonymous functions. \u2705 Nested functions & closures allow for advanced design. \u2705 Understand local vs global scope.","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/5.Functions/#practice-exercises","text":"Write a function to find the maximum of two numbers. Create a lambda function to calculate the cube of a number. Write a function that returns the sum, product, and difference of two numbers. Use a default argument to greet a user if no name is provided. Demonstrate variable scope by defining a global variable and modifying it inside a function.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/6.FileHandling/","text":"\ud83d\udcd3 Python Programming - File Handling \ud83d\udfe2 1. Text File Operations Python provides easy ways to handle files for reading and writing. Common File Modes: - 'r' \u2192 Read (default) 'w' \u2192 Write (overwrites existing file or creates new) 'a' \u2192 Append (adds to existing file) 'rb' / 'wb' \u2192 Read/Write binary files \u27a4 Reading a Text File: # Writing sample content for demonstration with open(\"../files/sample.txt\", \"w\") as file: file.write(\"Hello, this is a text file.\\nSecond line of text.\") # Reading file with open(\"../files/sample.txt\", \"r\") as file: content = file.read() print(content) \u27a4 Writing to a Text File: with open(\"../files/output.txt\", \"w\") as file: file.write(\"This is a new file.\\nFile handling in Python is easy!\") \ud83d\udfe2 2. File Path Handling with os Module The os module helps work with file paths in a platform-independent way. import os # Current working directory print(\"Current Directory:\", os.getcwd()) # Create a file path file_path = os.path.join(os.getcwd(), \"output.txt\") print(\"File Path:\", file_path) \ud83d\udfe2 3. Working with CSV Files CSV (Comma-Separated Values): - Simple format for storing tabular data. Python provides the csv module to work with CSV files. \u27a4 Reading a CSV File: import csv # Creating a sample CSV file with open(\"../files/data.csv\", \"w\", newline=\"\") as file: writer = csv.writer(file) writer.writerow([\"Name\", \"Age\"]) writer.writerow([\"Alice\", 23]) writer.writerow([\"Bob\", 28]) # Reading the CSV file with open(\"../files/data.csv\", \"r\") as file: reader = csv.reader(file) for row in reader: print(row) \u27a4 Using Dictionaries in CSV Files: # Writing using DictWriter with open(\"../files/data_dict.csv\", \"w\", newline=\"\") as file: fieldnames = [\"Name\", \"Age\"] writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() writer.writerow({\"Name\": \"Charlie\", \"Age\": 30}) writer.writerow({\"Name\": \"Dana\", \"Age\": 26}) # Reading using DictReader with open(\"../files/data_dict.csv\", \"r\") as file: reader = csv.DictReader(file) for row in reader: print(row) \ud83d\udfe2 4. Working with JSON JSON (JavaScript Object Notation): - Popular data format for exchanging data. Similar to Python dictionaries. \u27a4 Reading & Writing JSON: import json # Python dictionary person = {\"name\": \"Eve\", \"age\": 29, \"skills\": [\"Python\", \"Data Science\"]} # Writing to JSON file with open(\"../files/person.json\", \"w\") as file: json.dump(person, file) # Reading JSON file with open(\"../files/person.json\", \"r\") as file: data = json.load(file) print(data) \u27a4 Parsing JSON Strings: # JSON string json_str = '{\"name\": \"Frank\", \"age\": 32}' # Converting JSON string to dictionary person = json.loads(json_str) print(person[\"name\"]) Example Prompt to ChatGPT: ``` \"Generate Python code to read a JSON file containing student records and print their names.\" \ud83c\udfaf Quick Recap \u2705 File operations: reading, writing, appending \u2705 Use os module for file path handling \u2705 CSV files: csv.reader , csv.writer , and dictionaries \u2705 JSON: Read, write, parse structured data \ud83d\udcdd Practice Exercises Write a program to create a text file with your name and age. Read the file you just created and print its contents. Create a CSV file with three student records (name, age). Read and print all names from the CSV file. Write a program to save a dictionary as a JSON file and read it back.","title":"6.FileHandling"},{"location":"lectures/6.FileHandling/#python-programming-file-handling","text":"","title":"\ud83d\udcd3 Python Programming - File Handling"},{"location":"lectures/6.FileHandling/#1-text-file-operations","text":"","title":"\ud83d\udfe2 1. Text File Operations"},{"location":"lectures/6.FileHandling/#python-provides-easy-ways-to-handle-files-for-reading-and-writing","text":"Common File Modes: - 'r' \u2192 Read (default) 'w' \u2192 Write (overwrites existing file or creates new) 'a' \u2192 Append (adds to existing file) 'rb' / 'wb' \u2192 Read/Write binary files \u27a4 Reading a Text File: # Writing sample content for demonstration with open(\"../files/sample.txt\", \"w\") as file: file.write(\"Hello, this is a text file.\\nSecond line of text.\") # Reading file with open(\"../files/sample.txt\", \"r\") as file: content = file.read() print(content) \u27a4 Writing to a Text File: with open(\"../files/output.txt\", \"w\") as file: file.write(\"This is a new file.\\nFile handling in Python is easy!\")","title":"Python provides easy ways to handle files for reading and writing."},{"location":"lectures/6.FileHandling/#2-file-path-handling-with-os-module","text":"The os module helps work with file paths in a platform-independent way. import os # Current working directory print(\"Current Directory:\", os.getcwd()) # Create a file path file_path = os.path.join(os.getcwd(), \"output.txt\") print(\"File Path:\", file_path)","title":"\ud83d\udfe2 2. File Path Handling with os Module"},{"location":"lectures/6.FileHandling/#3-working-with-csv-files","text":"CSV (Comma-Separated Values): - Simple format for storing tabular data. Python provides the csv module to work with CSV files. \u27a4 Reading a CSV File: import csv # Creating a sample CSV file with open(\"../files/data.csv\", \"w\", newline=\"\") as file: writer = csv.writer(file) writer.writerow([\"Name\", \"Age\"]) writer.writerow([\"Alice\", 23]) writer.writerow([\"Bob\", 28]) # Reading the CSV file with open(\"../files/data.csv\", \"r\") as file: reader = csv.reader(file) for row in reader: print(row) \u27a4 Using Dictionaries in CSV Files: # Writing using DictWriter with open(\"../files/data_dict.csv\", \"w\", newline=\"\") as file: fieldnames = [\"Name\", \"Age\"] writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() writer.writerow({\"Name\": \"Charlie\", \"Age\": 30}) writer.writerow({\"Name\": \"Dana\", \"Age\": 26}) # Reading using DictReader with open(\"../files/data_dict.csv\", \"r\") as file: reader = csv.DictReader(file) for row in reader: print(row)","title":"\ud83d\udfe2 3. Working with CSV Files"},{"location":"lectures/6.FileHandling/#4-working-with-json","text":"JSON (JavaScript Object Notation): - Popular data format for exchanging data. Similar to Python dictionaries. \u27a4 Reading & Writing JSON: import json # Python dictionary person = {\"name\": \"Eve\", \"age\": 29, \"skills\": [\"Python\", \"Data Science\"]} # Writing to JSON file with open(\"../files/person.json\", \"w\") as file: json.dump(person, file) # Reading JSON file with open(\"../files/person.json\", \"r\") as file: data = json.load(file) print(data) \u27a4 Parsing JSON Strings: # JSON string json_str = '{\"name\": \"Frank\", \"age\": 32}' # Converting JSON string to dictionary person = json.loads(json_str) print(person[\"name\"]) Example Prompt to ChatGPT: ``` \"Generate Python code to read a JSON file containing student records and print their names.\"","title":"\ud83d\udfe2 4. Working with JSON"},{"location":"lectures/6.FileHandling/#quick-recap","text":"\u2705 File operations: reading, writing, appending \u2705 Use os module for file path handling \u2705 CSV files: csv.reader , csv.writer , and dictionaries \u2705 JSON: Read, write, parse structured data","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/6.FileHandling/#practice-exercises","text":"Write a program to create a text file with your name and age. Read the file you just created and print its contents. Create a CSV file with three student records (name, age). Read and print all names from the CSV file. Write a program to save a dictionary as a JSON file and read it back.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/7.OOP/","text":"\ud83d\udcd3 Python Programming - Object-Oriented Programming (OOP) \ud83d\udfe2 1. Classes & Objects What is OOP? Organizes code around real-world entities (objects). Class : Blueprint for creating objects. Object : An instance of a class. # Defining a class class Student: pass # Creating an object s1 = Student() print(type(s1)) \ud83d\udfe2 2. Class vs Object Attributes Class attributes : Shared by all objects. Object attributes : Unique to each object. \u27a4 Example: class Student: college = \"Westcliff University\" # Class attribute def __init__(self, name, age): self.name = name # Object attribute self.age = age s1 = Student(\"Alice\", 20) s2 = Student(\"Bob\", 22) print(s1.name, s1.college) print(s2.name, s2.college) \ud83d\udfe2 3. Initializing Object Attributes with __init__() __init__() is a special method that runs when an object is created. (Like Constructor) \u27a4 Example: class Car: def __init__(self, brand, year): self.brand = brand self.year = year c1 = Car(\"Toyota\", 2020) print(c1.brand, c1.year) \ud83d\udfe2 4. The self Keyword Refers to the current object. Used to access object attributes and methods. \u27a4 Example: class Dog: def __init__(self, name): self.name = name def speak(self): print(f\"{self.name} says Woof!\") d = Dog(\"Buddy\") d.speak() \ud83d\udfe2 5. Inheritance Inheritance allows a class to use properties and methods of another class. Types: - Single Inheritance Multiple Inheritance Multi-Level Inheritance \u27a4 Single Inheritance: class Animal: def speak(self): print(\"Animal sound\") class Dog(Animal): def bark(self): print(\"Woof!\") d = Dog() d.speak() d.bark() \u27a4 Multiple Inheritance: class A: def show_a(self): print(\"A\") class B: def show_b(self): print(\"B\") class C(A, B): pass c = C() c.show_a() c.show_b() \u27a4 Multi-Level Inheritance: class Grandparent: def grandparent_func(self): print(\"Grandparent\") class Parent(Grandparent): def parent_func(self): print(\"Parent\") class Child(Parent): def child_func(self): print(\"Child\") c = Child() c.grandparent_func() c.parent_func() c.child_func() \ud83d\udfe2 6. Polymorphism & Operator Overloading Polymorphism: Same function name but different behaviors. Operator Overloading: Using special methods to define how operators behave for custom objects. \u27a4 Polymorphism Example: class Cat: def sound(self): print(\"Meow\") class Dog: def sound(self): print(\"Woof\") animals = [Cat(), Dog()] for animal in animals: animal.sound() Traditional Overloading Does Not Work in Python def greet(name): print(f\"Hello, {name}!\") def greet(name, age): print(f\"Hello, {name}! You are {age} years old.\") greet(\"Alice\") # \u274c TypeError: greet() missing 1 required positional argument: 'age' But there is some work around this. Discuss how to implement function overloading in Python using default arguments or variable-length arguments. \u27a4 Operator Overloading Example: class Point: def __init__(self, x): self.x = x def __add__(self, other): return Point(self.x + other.x) p1 = Point(5) p2 = Point(10) result = p1 + p2 print(result.x) \ud83d\udfe2 7. Function Overriding & Encapsulation Function Overriding: Child class redefines a method from the parent class. Encapsulation: Restricts direct access to variables using private/protected attributes. \u27a4 Function Overriding Example: class Animal: def speak(self): print(\"Animal sound\") class Dog(Animal): def speak(self): print(\"Woof!\") d = Dog() d.speak() \u27a4 Encapsulation Example: class BankAccount: def __init__(self, balance): self.__balance = balance # Private attribute def get_balance(self): return self.__balance def deposit(self, amount): self.__balance += amount acc = BankAccount(1000) acc.deposit(500) print(acc.get_balance()) \ud83c\udfaf Quick Recap \u2705 OOP models real-world entities with classes and objects \u2705 Class attributes shared, object attributes unique \u2705 Inheritance promotes code reuse \u2705 Polymorphism enables flexibility \u2705 Operator overloading customizes behavior \u2705 Function overriding & encapsulation provide safety and control \ud83d\udcdd Practice Exercises Create a Car class with brand and year, and display details using a method. Demonstrate single inheritance with Animal \u2192 Bird . Create a class Rectangle that overloads + to add areas of two rectangles. Use encapsulation to hide a bank account's balance and provide methods to deposit/withdraw. Demonstrate function overriding using a parent-child class structure.","title":"7.OOP"},{"location":"lectures/7.OOP/#python-programming-object-oriented-programming-oop","text":"","title":"\ud83d\udcd3 Python Programming - Object-Oriented Programming (OOP)"},{"location":"lectures/7.OOP/#1-classes-objects","text":"What is OOP? Organizes code around real-world entities (objects). Class : Blueprint for creating objects. Object : An instance of a class. # Defining a class class Student: pass # Creating an object s1 = Student() print(type(s1))","title":"\ud83d\udfe2 1. Classes &amp; Objects"},{"location":"lectures/7.OOP/#2-class-vs-object-attributes","text":"Class attributes : Shared by all objects. Object attributes : Unique to each object. \u27a4 Example: class Student: college = \"Westcliff University\" # Class attribute def __init__(self, name, age): self.name = name # Object attribute self.age = age s1 = Student(\"Alice\", 20) s2 = Student(\"Bob\", 22) print(s1.name, s1.college) print(s2.name, s2.college)","title":"\ud83d\udfe2 2. Class vs Object Attributes"},{"location":"lectures/7.OOP/#3-initializing-object-attributes-with-__init__","text":"__init__() is a special method that runs when an object is created. (Like Constructor) \u27a4 Example: class Car: def __init__(self, brand, year): self.brand = brand self.year = year c1 = Car(\"Toyota\", 2020) print(c1.brand, c1.year)","title":"\ud83d\udfe2 3. Initializing Object Attributes with __init__()"},{"location":"lectures/7.OOP/#4-the-self-keyword","text":"Refers to the current object. Used to access object attributes and methods. \u27a4 Example: class Dog: def __init__(self, name): self.name = name def speak(self): print(f\"{self.name} says Woof!\") d = Dog(\"Buddy\") d.speak()","title":"\ud83d\udfe2 4. The self Keyword"},{"location":"lectures/7.OOP/#5-inheritance","text":"Inheritance allows a class to use properties and methods of another class. Types: - Single Inheritance Multiple Inheritance Multi-Level Inheritance \u27a4 Single Inheritance: class Animal: def speak(self): print(\"Animal sound\") class Dog(Animal): def bark(self): print(\"Woof!\") d = Dog() d.speak() d.bark() \u27a4 Multiple Inheritance: class A: def show_a(self): print(\"A\") class B: def show_b(self): print(\"B\") class C(A, B): pass c = C() c.show_a() c.show_b() \u27a4 Multi-Level Inheritance: class Grandparent: def grandparent_func(self): print(\"Grandparent\") class Parent(Grandparent): def parent_func(self): print(\"Parent\") class Child(Parent): def child_func(self): print(\"Child\") c = Child() c.grandparent_func() c.parent_func() c.child_func()","title":"\ud83d\udfe2 5. Inheritance"},{"location":"lectures/7.OOP/#6-polymorphism-operator-overloading","text":"","title":"\ud83d\udfe2 6. Polymorphism &amp; Operator Overloading"},{"location":"lectures/7.OOP/#polymorphism","text":"Same function name but different behaviors.","title":"Polymorphism:"},{"location":"lectures/7.OOP/#operator-overloading","text":"Using special methods to define how operators behave for custom objects. \u27a4 Polymorphism Example: class Cat: def sound(self): print(\"Meow\") class Dog: def sound(self): print(\"Woof\") animals = [Cat(), Dog()] for animal in animals: animal.sound() Traditional Overloading Does Not Work in Python def greet(name): print(f\"Hello, {name}!\") def greet(name, age): print(f\"Hello, {name}! You are {age} years old.\") greet(\"Alice\") # \u274c TypeError: greet() missing 1 required positional argument: 'age' But there is some work around this. Discuss how to implement function overloading in Python using default arguments or variable-length arguments. \u27a4 Operator Overloading Example: class Point: def __init__(self, x): self.x = x def __add__(self, other): return Point(self.x + other.x) p1 = Point(5) p2 = Point(10) result = p1 + p2 print(result.x)","title":"Operator Overloading:"},{"location":"lectures/7.OOP/#7-function-overriding-encapsulation","text":"","title":"\ud83d\udfe2 7. Function Overriding &amp; Encapsulation"},{"location":"lectures/7.OOP/#function-overriding","text":"Child class redefines a method from the parent class.","title":"Function Overriding:"},{"location":"lectures/7.OOP/#encapsulation","text":"Restricts direct access to variables using private/protected attributes. \u27a4 Function Overriding Example: class Animal: def speak(self): print(\"Animal sound\") class Dog(Animal): def speak(self): print(\"Woof!\") d = Dog() d.speak() \u27a4 Encapsulation Example: class BankAccount: def __init__(self, balance): self.__balance = balance # Private attribute def get_balance(self): return self.__balance def deposit(self, amount): self.__balance += amount acc = BankAccount(1000) acc.deposit(500) print(acc.get_balance())","title":"Encapsulation:"},{"location":"lectures/7.OOP/#quick-recap","text":"\u2705 OOP models real-world entities with classes and objects \u2705 Class attributes shared, object attributes unique \u2705 Inheritance promotes code reuse \u2705 Polymorphism enables flexibility \u2705 Operator overloading customizes behavior \u2705 Function overriding & encapsulation provide safety and control","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/7.OOP/#practice-exercises","text":"Create a Car class with brand and year, and display details using a method. Demonstrate single inheritance with Animal \u2192 Bird . Create a class Rectangle that overloads + to add areas of two rectangles. Use encapsulation to hide a bank account's balance and provide methods to deposit/withdraw. Demonstrate function overriding using a parent-child class structure.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/8.Error%26Debugging/","text":"\ud83d\udcd3 Python Programming - Error Handling and Debugging \ud83d\udfe2 1. Try-Except Blocks Error handling prevents programs from crashing due to unexpected issues. The basic structure: try: # Code that might raise an error except: # Code to handle the error \u27a4 **Example:** ```python try: num = int(input(\"Enter a number: \")) print(f\"Square: {num**2}\") except Exception as e: print(\"Invalid input! Please enter a number.\\nException:\", e) \ud83d\udfe2 2. Catching Specific Exceptions It's better to catch specific exceptions to handle different errors appropriately. try: num = int(input(\"Enter a number: \")) result = 10 / num except ValueError: print(\"Please enter a valid number.\") except ZeroDivisionError: print(\"Division by zero is not allowed.\") except Exception as e: print(\"An unexpected error occurred:\", e) \ud83d\udfe2 3. Using else & finally else: Runs if no exceptions occur. finally: Runs no matter what (cleanup code). try: num = int(input(\"Enter a positive number: \")) except ValueError: print(\"Invalid input.\") else: print(f\"You entered: {num}\") finally: print(\"This always runs.\") \ud83d\udfe2 4. Generating and Creating Custom Exceptions You can use raise to generate exceptions. Custom exceptions are created by defining a new class that inherits from Exception . \u27a4 Raising Exceptions Example: age = -5 if age < 0: raise ValueError(\"Age cannot be negative.\") \u27a4 Custom Exception Example: class NegativeAgeError(Exception): pass age = -5 try: if age < 0: raise NegativeAgeError(\"Age cannot be negative.\") except NegativeAgeError as e: print(e) \ud83d\udfe2 5. Problem-Solving Strategies \u2705 Understand the error message. \u2705 Use print statements or debugging tools to trace the problem. \u2705 Break the code into smaller parts. \u2705 Handle exceptions gracefully using try-except blocks. \u2705 Anticipate common errors (e.g., invalid input, division by zero). \u2705 Write custom exceptions for specific situations. \ud83c\udfaf Quick Recap \u2705 Use try-except to catch errors and prevent crashes. \u2705 Catch specific exceptions for better error handling. \u2705 else and finally provide structured error handling. \u2705 Custom exceptions allow for clear, descriptive error messages. \u2705 Debugging is an essential skill for reliable code. \ud83d\udcdd Practice Exercises Write a program that asks for two numbers and divides them. Handle: ValueError for invalid inputs ZeroDivisionError for division by zero Create a custom exception called PasswordTooShortError if the entered password is less than 8 characters. Demonstrate the use of else and finally in a simple program that reads a file. Intentionally raise an exception if a negative number is entered for age.","title":"8.Error&Debugging"},{"location":"lectures/8.Error%26Debugging/#python-programming-error-handling-and-debugging","text":"","title":"\ud83d\udcd3 Python Programming - Error Handling and Debugging"},{"location":"lectures/8.Error%26Debugging/#1-try-except-blocks","text":"Error handling prevents programs from crashing due to unexpected issues. The basic structure: try: # Code that might raise an error except: # Code to handle the error \u27a4 **Example:** ```python try: num = int(input(\"Enter a number: \")) print(f\"Square: {num**2}\") except Exception as e: print(\"Invalid input! Please enter a number.\\nException:\", e)","title":"\ud83d\udfe2 1. Try-Except Blocks"},{"location":"lectures/8.Error%26Debugging/#2-catching-specific-exceptions","text":"It's better to catch specific exceptions to handle different errors appropriately. try: num = int(input(\"Enter a number: \")) result = 10 / num except ValueError: print(\"Please enter a valid number.\") except ZeroDivisionError: print(\"Division by zero is not allowed.\") except Exception as e: print(\"An unexpected error occurred:\", e)","title":"\ud83d\udfe2 2. Catching Specific Exceptions"},{"location":"lectures/8.Error%26Debugging/#3-using-else-finally","text":"else: Runs if no exceptions occur. finally: Runs no matter what (cleanup code). try: num = int(input(\"Enter a positive number: \")) except ValueError: print(\"Invalid input.\") else: print(f\"You entered: {num}\") finally: print(\"This always runs.\")","title":"\ud83d\udfe2 3. Using else &amp; finally"},{"location":"lectures/8.Error%26Debugging/#4-generating-and-creating-custom-exceptions","text":"You can use raise to generate exceptions. Custom exceptions are created by defining a new class that inherits from Exception . \u27a4 Raising Exceptions Example: age = -5 if age < 0: raise ValueError(\"Age cannot be negative.\") \u27a4 Custom Exception Example: class NegativeAgeError(Exception): pass age = -5 try: if age < 0: raise NegativeAgeError(\"Age cannot be negative.\") except NegativeAgeError as e: print(e)","title":"\ud83d\udfe2 4. Generating and Creating Custom Exceptions"},{"location":"lectures/8.Error%26Debugging/#5-problem-solving-strategies","text":"\u2705 Understand the error message. \u2705 Use print statements or debugging tools to trace the problem. \u2705 Break the code into smaller parts. \u2705 Handle exceptions gracefully using try-except blocks. \u2705 Anticipate common errors (e.g., invalid input, division by zero). \u2705 Write custom exceptions for specific situations.","title":"\ud83d\udfe2 5. Problem-Solving Strategies"},{"location":"lectures/8.Error%26Debugging/#quick-recap","text":"\u2705 Use try-except to catch errors and prevent crashes. \u2705 Catch specific exceptions for better error handling. \u2705 else and finally provide structured error handling. \u2705 Custom exceptions allow for clear, descriptive error messages. \u2705 Debugging is an essential skill for reliable code.","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/8.Error%26Debugging/#practice-exercises","text":"Write a program that asks for two numbers and divides them. Handle: ValueError for invalid inputs ZeroDivisionError for division by zero Create a custom exception called PasswordTooShortError if the entered password is less than 8 characters. Demonstrate the use of else and finally in a simple program that reads a file. Intentionally raise an exception if a negative number is entered for age.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/9.AdvancedConcepts/","text":"\ud83d\udcd3 Python Programming - Advanced Python Concepts \ud83d\udfe2 1. Lambda Functions (Anonymous Functions) lambda creates small, one-line, anonymous functions. Often used with map() , filter() , sorted() , etc. \u27a4 Example: # Regular function def square(x): return x ** 2 print(square(5)) # Lambda function square_lambda = lambda x: x ** 2 print(square_lambda(5)) \ud83d\udfe2 2. Generators & Iterators Generators: - Use yield to produce a sequence of values lazily (one at a time). Saves memory compared to lists. Iterators: - Any object with __iter__() and __next__() methods. \u27a4 Generator Example: def count_up_to(n): count = 1 while count <= n: yield count count += 1 print(count_up_to(5)) # This will print a generator object print(list(count_up_to(5))) for num in count_up_to(5): print(num) \u27a4 Iterator Example: nums = [1, 2, 3] it = iter(nums) print(next(it)) print(next(it)) print(next(it)) \ud83d\udfe2 3. List Comprehensions A concise way to create lists in a single line. \u27a4 Example: # Without list comprehension squares = [] for i in range(5): squares.append(i ** 2) print(squares) # With list comprehension squares = [i ** 2 for i in range(5)] print(squares) # With condition evens = [i for i in range(10) if i % 2 == 0] print(evens) \ud83d\udfe2 4. Working with args and *kwargs *args : Allows variable number of positional arguments. **kwargs : Allows variable number of keyword arguments. \u27a4 Example with *args: def add(*numbers): total = sum(numbers) print(\"Sum:\", total) add(1, 2, 3) add(4, 5) \u27a4 Example with **kwargs: def student_info(**kwargs): for key, value in kwargs.items(): print(f\"{key}: {value}\") student_info(name=\"Alice\", age=21, grade=\"A\") \u27a4 Using map() Function: nums = [1, 2, 3, 4] squared = list(map(lambda x: x ** 2, nums)) print(squared) \u27a4 Using filter() Function: nums = [1, 2, 3, 4, 5, 6] evens = list(filter(lambda x: x % 2 == 0, nums)) print(evens) \u27a4 Using reduce() Function - reduce() applies a function cumulatively to the items of a sequence. It is part of the functools module. from functools import reduce # Multiply all numbers in a list nums = [1, 2, 3, 4] product = reduce(lambda x, y: x * y, nums) print(product) nums = [5, 10, 15] total_sum = reduce(lambda x, y: x + y, nums) print(total_sum) \u27a4 Using enumerate(): fruits = [\"apple\", \"banana\", \"cherry\"] for index, fruit in enumerate(fruits, start=1): print(index, fruit) \ud83c\udfaf Quick Recap \u2705 map() : Apply function to all items \u2705 filter() : Filter items based on condition \u2705 reduce() : Cumulatively apply function to reduce a sequence to a single value \u2705 Lambda: One-line anonymous functions \u2705 Generators: Produce values lazily with yield \u2705 Iterators: Objects used to iterate over sequences \u2705 List comprehensions: Compact way to build lists \u2705 args, *kwargs: Flexible argument handling \ud83d\udcdd Practice Exercises Write a lambda function to multiply two numbers. Create a generator that yields even numbers from 1 to 10. Use list comprehension to create a list of squares for numbers 1 to 5. Write a function that accepts any number of arguments and prints their sum using *args. Write a function that accepts student details as keyword arguments and prints them. Use map() and filter() to square numbers and filter odd numbers from a list.","title":"9.AdvancedConcepts"},{"location":"lectures/9.AdvancedConcepts/#python-programming-advanced-python-concepts","text":"","title":"\ud83d\udcd3 Python Programming - Advanced Python Concepts"},{"location":"lectures/9.AdvancedConcepts/#1-lambda-functions-anonymous-functions","text":"lambda creates small, one-line, anonymous functions. Often used with map() , filter() , sorted() , etc. \u27a4 Example: # Regular function def square(x): return x ** 2 print(square(5)) # Lambda function square_lambda = lambda x: x ** 2 print(square_lambda(5))","title":"\ud83d\udfe2 1. Lambda Functions (Anonymous Functions)"},{"location":"lectures/9.AdvancedConcepts/#2-generators-iterators","text":"Generators: - Use yield to produce a sequence of values lazily (one at a time). Saves memory compared to lists. Iterators: - Any object with __iter__() and __next__() methods. \u27a4 Generator Example: def count_up_to(n): count = 1 while count <= n: yield count count += 1 print(count_up_to(5)) # This will print a generator object print(list(count_up_to(5))) for num in count_up_to(5): print(num) \u27a4 Iterator Example: nums = [1, 2, 3] it = iter(nums) print(next(it)) print(next(it)) print(next(it))","title":"\ud83d\udfe2 2. Generators &amp; Iterators"},{"location":"lectures/9.AdvancedConcepts/#3-list-comprehensions","text":"A concise way to create lists in a single line. \u27a4 Example: # Without list comprehension squares = [] for i in range(5): squares.append(i ** 2) print(squares) # With list comprehension squares = [i ** 2 for i in range(5)] print(squares) # With condition evens = [i for i in range(10) if i % 2 == 0] print(evens)","title":"\ud83d\udfe2 3. List Comprehensions"},{"location":"lectures/9.AdvancedConcepts/#4-working-with-args-and-kwargs","text":"*args : Allows variable number of positional arguments. **kwargs : Allows variable number of keyword arguments. \u27a4 Example with *args: def add(*numbers): total = sum(numbers) print(\"Sum:\", total) add(1, 2, 3) add(4, 5) \u27a4 Example with **kwargs: def student_info(**kwargs): for key, value in kwargs.items(): print(f\"{key}: {value}\") student_info(name=\"Alice\", age=21, grade=\"A\") \u27a4 Using map() Function: nums = [1, 2, 3, 4] squared = list(map(lambda x: x ** 2, nums)) print(squared) \u27a4 Using filter() Function: nums = [1, 2, 3, 4, 5, 6] evens = list(filter(lambda x: x % 2 == 0, nums)) print(evens) \u27a4 Using reduce() Function - reduce() applies a function cumulatively to the items of a sequence. It is part of the functools module. from functools import reduce # Multiply all numbers in a list nums = [1, 2, 3, 4] product = reduce(lambda x, y: x * y, nums) print(product) nums = [5, 10, 15] total_sum = reduce(lambda x, y: x + y, nums) print(total_sum) \u27a4 Using enumerate(): fruits = [\"apple\", \"banana\", \"cherry\"] for index, fruit in enumerate(fruits, start=1): print(index, fruit)","title":"\ud83d\udfe2 4. Working with args and *kwargs"},{"location":"lectures/9.AdvancedConcepts/#quick-recap","text":"\u2705 map() : Apply function to all items \u2705 filter() : Filter items based on condition \u2705 reduce() : Cumulatively apply function to reduce a sequence to a single value \u2705 Lambda: One-line anonymous functions \u2705 Generators: Produce values lazily with yield \u2705 Iterators: Objects used to iterate over sequences \u2705 List comprehensions: Compact way to build lists \u2705 args, *kwargs: Flexible argument handling","title":"\ud83c\udfaf Quick Recap"},{"location":"lectures/9.AdvancedConcepts/#practice-exercises","text":"Write a lambda function to multiply two numbers. Create a generator that yields even numbers from 1 to 10. Use list comprehension to create a list of squares for numbers 1 to 5. Write a function that accepts any number of arguments and prints their sum using *args. Write a function that accepts student details as keyword arguments and prints them. Use map() and filter() to square numbers and filter odd numbers from a list.","title":"\ud83d\udcdd Practice Exercises"}]}